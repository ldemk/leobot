
STM324_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000322c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080033bc  080033bc  000133bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800360c  0800360c  0001360c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003614  08003614  00013614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800361c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00000864  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000874  20000874  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002399c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000040cc  00000000  00000000  000439dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f68  00000000  00000000  00047aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001388  00000000  00000000  00048a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b984  00000000  00000000  00049d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00005d1f  00000000  00000000  0005571c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005b43b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002ef8  00000000  00000000  0005b4b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000b4cf  00000000  00000000  0005e3b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080033a4 	.word	0x080033a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080033a4 	.word	0x080033a4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80004e0:	b513      	push	{r0, r1, r4, lr}
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e2:	4b0f      	ldr	r3, [pc, #60]	; (8000520 <MX_DMA_Init+0x40>)
 80004e4:	2400      	movs	r4, #0
 80004e6:	9401      	str	r4, [sp, #4]
 80004e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004ea:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80004ee:	631a      	str	r2, [r3, #48]	; 0x30
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80004f6:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80004fa:	2105      	movs	r1, #5
 80004fc:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000500:	f000 fc84 	bl	8000e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000504:	2010      	movs	r0, #16
 8000506:	f000 fcc3 	bl	8000e90 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800050a:	4622      	mov	r2, r4
 800050c:	2105      	movs	r1, #5
 800050e:	2011      	movs	r0, #17
 8000510:	f000 fc7c 	bl	8000e0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000514:	2011      	movs	r0, #17
 8000516:	f000 fcbb 	bl	8000e90 <HAL_NVIC_EnableIRQ>

}
 800051a:	b002      	add	sp, #8
 800051c:	bd10      	pop	{r4, pc}
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <StartDefaultTask>:
  /* USER CODE END RTOS_QUEUES */
}

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8000524:	b508      	push	{r3, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000526:	2001      	movs	r0, #1
 8000528:	f002 fa48 	bl	80029bc <osDelay>
 800052c:	e7fb      	b.n	8000526 <StartDefaultTask+0x2>
	...

08000530 <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <vApplicationGetIdleTaskMemory+0x10>)
 8000532:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000534:	4b03      	ldr	r3, [pc, #12]	; (8000544 <vApplicationGetIdleTaskMemory+0x14>)
 8000536:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	6013      	str	r3, [r2, #0]
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	2000022c 	.word	0x2000022c
 8000544:	2000002c 	.word	0x2000002c

08000548 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8000548:	b530      	push	{r4, r5, lr}
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 800054a:	4d08      	ldr	r5, [pc, #32]	; (800056c <MX_FREERTOS_Init+0x24>)
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 800054e:	b089      	sub	sp, #36	; 0x24
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000550:	ac01      	add	r4, sp, #4
 8000552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000554:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000558:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800055c:	2100      	movs	r1, #0
 800055e:	a801      	add	r0, sp, #4
 8000560:	f002 fa17 	bl	8002992 <osThreadCreate>
 8000564:	4b02      	ldr	r3, [pc, #8]	; (8000570 <MX_FREERTOS_Init+0x28>)
 8000566:	6018      	str	r0, [r3, #0]
}
 8000568:	b009      	add	sp, #36	; 0x24
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	080033bc 	.word	0x080033bc
 8000570:	20000398 	.word	0x20000398

08000574 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000574:	b086      	sub	sp, #24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MX_GPIO_Init+0x70>)
 8000578:	2200      	movs	r2, #0
 800057a:	9201      	str	r2, [sp, #4]
 800057c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800057e:	f041 0104 	orr.w	r1, r1, #4
 8000582:	6319      	str	r1, [r3, #48]	; 0x30
 8000584:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000586:	f001 0104 	and.w	r1, r1, #4
 800058a:	9101      	str	r1, [sp, #4]
 800058c:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800058e:	9202      	str	r2, [sp, #8]
 8000590:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000592:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000596:	6319      	str	r1, [r3, #48]	; 0x30
 8000598:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800059a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800059e:	9102      	str	r1, [sp, #8]
 80005a0:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	9203      	str	r2, [sp, #12]
 80005a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005a6:	f041 0101 	orr.w	r1, r1, #1
 80005aa:	6319      	str	r1, [r3, #48]	; 0x30
 80005ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005ae:	f001 0101 	and.w	r1, r1, #1
 80005b2:	9103      	str	r1, [sp, #12]
 80005b4:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005b6:	9204      	str	r2, [sp, #16]
 80005b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005ba:	f041 0110 	orr.w	r1, r1, #16
 80005be:	6319      	str	r1, [r3, #48]	; 0x30
 80005c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005c2:	f001 0110 	and.w	r1, r1, #16
 80005c6:	9104      	str	r1, [sp, #16]
 80005c8:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	9205      	str	r2, [sp, #20]
 80005cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ce:	f042 0202 	orr.w	r2, r2, #2
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0302 	and.w	r3, r3, #2
 80005da:	9305      	str	r3, [sp, #20]
 80005dc:	9b05      	ldr	r3, [sp, #20]

}
 80005de:	b006      	add	sp, #24
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800

080005e8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80005e8:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 80005ea:	480d      	ldr	r0, [pc, #52]	; (8000620 <MX_I2C3_Init+0x38>)
  hi2c3.Init.ClockSpeed = 100000;
 80005ec:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <MX_I2C3_Init+0x3c>)
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <MX_I2C3_Init+0x40>)
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 208;
 80005f0:	22d0      	movs	r2, #208	; 0xd0
  hi2c3.Init.ClockSpeed = 100000;
 80005f2:	e880 000a 	stmia.w	r0, {r1, r3}
  hi2c3.Init.OwnAddress1 = 208;
 80005f6:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005f8:	2300      	movs	r3, #0
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fe:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000600:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000602:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000604:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000606:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000608:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800060a:	f000 ffc3 	bl	8001594 <HAL_I2C_Init>
 800060e:	b128      	cbz	r0, 800061c <MX_I2C3_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000610:	214c      	movs	r1, #76	; 0x4c
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <MX_I2C3_Init+0x44>)
  }

}
 8000614:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000618:	f000 b8b6 	b.w	8000788 <_Error_Handler>
 800061c:	bd08      	pop	{r3, pc}
 800061e:	bf00      	nop
 8000620:	200005f0 	.word	0x200005f0
 8000624:	000186a0 	.word	0x000186a0
 8000628:	40005c00 	.word	0x40005c00
 800062c:	080033e4 	.word	0x080033e4

08000630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C3)
 8000632:	6802      	ldr	r2, [r0, #0]
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <HAL_I2C_MspInit+0x60>)
 8000636:	429a      	cmp	r2, r3
{
 8000638:	b087      	sub	sp, #28
  if(i2cHandle->Instance==I2C3)
 800063a:	d127      	bne.n	800068c <HAL_I2C_MspInit+0x5c>
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800063c:	2404      	movs	r4, #4
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800063e:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000642:	2712      	movs	r7, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000646:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000648:	eb0d 0104 	add.w	r1, sp, r4
 800064c:	4811      	ldr	r0, [pc, #68]	; (8000694 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800064e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000650:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000652:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000654:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000656:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000658:	f000 fe56 	bl	8001308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800065c:	f44f 7380 	mov.w	r3, #256	; 0x100
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000660:	eb0d 0104 	add.w	r1, sp, r4
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000666:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000668:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800066a:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800066c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800066e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f000 fe4a 	bl	8001308 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <HAL_I2C_MspInit+0x6c>)
 800067a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800067c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000680:	641a      	str	r2, [r3, #64]	; 0x40
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800068c:	b007      	add	sp, #28
 800068e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000690:	40005c00 	.word	0x40005c00
 8000694:	40020800 	.word	0x40020800
 8000698:	40020000 	.word	0x40020000
 800069c:	40023800 	.word	0x40023800

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b570      	push	{r4, r5, r6, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xa8>)
 80006a6:	2100      	movs	r1, #0
 80006a8:	9101      	str	r1, [sp, #4]
 80006aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006b0:	641a      	str	r2, [r3, #64]	; 0x40
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	4b23      	ldr	r3, [pc, #140]	; (800074c <SystemClock_Config+0xac>)
 80006be:	9102      	str	r1, [sp, #8]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ce:	9302      	str	r3, [sp, #8]
 80006d0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d2:	2301      	movs	r3, #1
 80006d4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006da:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e2:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006e6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e8:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006ea:	f44f 73a8 	mov.w	r3, #336	; 0x150
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ee:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f6:	9613      	str	r6, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f8:	f001 f81e 	bl	8001738 <HAL_RCC_OscConfig>
 80006fc:	b100      	cbz	r0, 8000700 <SystemClock_Config+0x60>
 80006fe:	e7fe      	b.n	80006fe <SystemClock_Config+0x5e>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000706:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070e:	2105      	movs	r1, #5
 8000710:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000716:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000718:	f001 fa34 	bl	8001b84 <HAL_RCC_ClockConfig>
 800071c:	4604      	mov	r4, r0
 800071e:	b100      	cbz	r0, 8000722 <SystemClock_Config+0x82>
 8000720:	e7fe      	b.n	8000720 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000722:	f001 fb23 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8000726:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072a:	fbb0 f0f3 	udiv	r0, r0, r3
 800072e:	f000 fbc5 	bl	8000ebc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000732:	4630      	mov	r0, r6
 8000734:	f000 fbd8 	bl	8000ee8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000738:	4622      	mov	r2, r4
 800073a:	4629      	mov	r1, r5
 800073c:	f04f 30ff 	mov.w	r0, #4294967295
 8000740:	f000 fb64 	bl	8000e0c <HAL_NVIC_SetPriority>
}
 8000744:	b014      	add	sp, #80	; 0x50
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <main>:
{
 8000750:	b508      	push	{r3, lr}
  HAL_Init();
 8000752:	f000 fb11 	bl	8000d78 <HAL_Init>
  SystemClock_Config();
 8000756:	f7ff ffa3 	bl	80006a0 <SystemClock_Config>
  MX_GPIO_Init();
 800075a:	f7ff ff0b 	bl	8000574 <MX_GPIO_Init>
  MX_DMA_Init();
 800075e:	f7ff febf 	bl	80004e0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000762:	f000 f883 	bl	800086c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000766:	f000 f8b5 	bl	80008d4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800076a:	f000 f8e5 	bl	8000938 <MX_TIM3_Init>
  MX_TIM8_Init();
 800076e:	f000 f915 	bl	800099c <MX_TIM8_Init>
  MX_TIM4_Init();
 8000772:	f000 f9f7 	bl	8000b64 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000776:	f000 fa4f 	bl	8000c18 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 800077a:	f7ff ff35 	bl	80005e8 <MX_I2C3_Init>
  MX_FREERTOS_Init();
 800077e:	f7ff fee3 	bl	8000548 <MX_FREERTOS_Init>
  osKernelStart();
 8000782:	f002 f901 	bl	8002988 <osKernelStart>
 8000786:	e7fe      	b.n	8000786 <main+0x36>

08000788 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8000788:	e7fe      	b.n	8000788 <_Error_Handler>

0800078a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
 800078a:	4770      	bx	lr

0800078c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800078c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800078e:	2003      	movs	r0, #3
 8000790:	f000 fb1e 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	4611      	mov	r1, r2
 8000798:	f06f 000b 	mvn.w	r0, #11
 800079c:	f000 fb36 	bl	8000e0c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	4611      	mov	r1, r2
 80007a4:	f06f 000a 	mvn.w	r0, #10
 80007a8:	f000 fb30 	bl	8000e0c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	4611      	mov	r1, r2
 80007b0:	f06f 0009 	mvn.w	r0, #9
 80007b4:	f000 fb2a 	bl	8000e0c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	4611      	mov	r1, r2
 80007bc:	f06f 0004 	mvn.w	r0, #4
 80007c0:	f000 fb24 	bl	8000e0c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	4611      	mov	r1, r2
 80007c8:	f06f 0003 	mvn.w	r0, #3
 80007cc:	f000 fb1e 	bl	8000e0c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	210f      	movs	r1, #15
 80007d4:	f06f 0001 	mvn.w	r0, #1
 80007d8:	f000 fb18 	bl	8000e0c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	210f      	movs	r1, #15
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80007e8:	f000 bb10 	b.w	8000e0c <HAL_NVIC_SetPriority>

080007ec <NMI_Handler>:
 80007ec:	4770      	bx	lr

080007ee <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80007ee:	e7fe      	b.n	80007ee <HardFault_Handler>

080007f0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80007f0:	e7fe      	b.n	80007f0 <MemManage_Handler>

080007f2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler>

080007f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler>

080007f6 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80007f6:	4770      	bx	lr

080007f8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80007f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007fa:	f000 fad7 	bl	8000dac <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8000802:	f002 b8e3 	b.w	80029cc <osSystickHandler>
	...

08000808 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000808:	4801      	ldr	r0, [pc, #4]	; (8000810 <DMA1_Stream5_IRQHandler+0x8>)
 800080a:	f000 bcc3 	b.w	8001194 <HAL_DMA_IRQHandler>
 800080e:	bf00      	nop
 8000810:	20000770 	.word	0x20000770

08000814 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000814:	4801      	ldr	r0, [pc, #4]	; (800081c <DMA1_Stream6_IRQHandler+0x8>)
 8000816:	f000 bcbd 	b.w	8001194 <HAL_DMA_IRQHandler>
 800081a:	bf00      	nop
 800081c:	200007d0 	.word	0x200007d0

08000820 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000820:	490f      	ldr	r1, [pc, #60]	; (8000860 <SystemInit+0x40>)
 8000822:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000826:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800082a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <SystemInit+0x44>)
 8000830:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000832:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8000834:	f042 0201 	orr.w	r2, r2, #1
 8000838:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800083a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000842:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000846:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <SystemInit+0x48>)
 800084a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000852:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000854:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800085a:	608b      	str	r3, [r1, #8]
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000ed00 	.word	0xe000ed00
 8000864:	40023800 	.word	0x40023800
 8000868:	24003010 	.word	0x24003010

0800086c <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800086c:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 800086e:	4816      	ldr	r0, [pc, #88]	; (80008c8 <MX_TIM1_Init+0x5c>)
  htim1.Init.Prescaler = 0;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <MX_TIM1_Init+0x60>)
 8000872:	2400      	movs	r4, #0
{
 8000874:	b08c      	sub	sp, #48	; 0x30
  htim1.Init.Prescaler = 0;
 8000876:	e880 0018 	stmia.w	r0, {r3, r4}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 480;
 800087a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800087e:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000880:	2303      	movs	r3, #3
 8000882:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000884:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000886:	2301      	movs	r3, #1
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	6084      	str	r4, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088a:	6104      	str	r4, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 800088c:	6144      	str	r4, [r0, #20]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800088e:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000890:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000892:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 8000894:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000896:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000898:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800089a:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800089c:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800089e:	f001 fc1d 	bl	80020dc <HAL_TIM_Encoder_Init>
 80008a2:	b118      	cbz	r0, 80008ac <MX_TIM1_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80008a4:	2158      	movs	r1, #88	; 0x58
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <MX_TIM1_Init+0x64>)
 80008a8:	f7ff ff6e 	bl	8000788 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ac:	a901      	add	r1, sp, #4
 80008ae:	4806      	ldr	r0, [pc, #24]	; (80008c8 <MX_TIM1_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b4:	f001 fe40 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 80008b8:	b118      	cbz	r0, 80008c2 <MX_TIM1_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 80008ba:	215f      	movs	r1, #95	; 0x5f
 80008bc:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_TIM1_Init+0x64>)
 80008be:	f7ff ff63 	bl	8000788 <_Error_Handler>
  }

}
 80008c2:	b00c      	add	sp, #48	; 0x30
 80008c4:	bd10      	pop	{r4, pc}
 80008c6:	bf00      	nop
 80008c8:	200006f8 	.word	0x200006f8
 80008cc:	40010000 	.word	0x40010000
 80008d0:	0800340e 	.word	0x0800340e

080008d4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80008d4:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80008d6:	4816      	ldr	r0, [pc, #88]	; (8000930 <MX_TIM2_Init+0x5c>)
  htim2.Init.Prescaler = 0;
 80008d8:	2400      	movs	r4, #0
 80008da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
{
 80008de:	b08c      	sub	sp, #48	; 0x30
  htim2.Init.Prescaler = 0;
 80008e0:	e880 0018 	stmia.w	r0, {r3, r4}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 480;
 80008e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80008e8:	60c3      	str	r3, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008ea:	2303      	movs	r3, #3
 80008ec:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80008ee:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008f0:	2301      	movs	r3, #1
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f2:	6084      	str	r4, [r0, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008f6:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008f8:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008fa:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 80008fc:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008fe:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000900:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000902:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000904:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000906:	f001 fbe9 	bl	80020dc <HAL_TIM_Encoder_Init>
 800090a:	b118      	cbz	r0, 8000914 <MX_TIM2_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 800090c:	2179      	movs	r1, #121	; 0x79
 800090e:	4809      	ldr	r0, [pc, #36]	; (8000934 <MX_TIM2_Init+0x60>)
 8000910:	f7ff ff3a 	bl	8000788 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000914:	a901      	add	r1, sp, #4
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_TIM2_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091c:	f001 fe0c 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	b118      	cbz	r0, 800092a <MX_TIM2_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	4803      	ldr	r0, [pc, #12]	; (8000934 <MX_TIM2_Init+0x60>)
 8000926:	f7ff ff2f 	bl	8000788 <_Error_Handler>
  }

}
 800092a:	b00c      	add	sp, #48	; 0x30
 800092c:	bd10      	pop	{r4, pc}
 800092e:	bf00      	nop
 8000930:	20000734 	.word	0x20000734
 8000934:	0800340e 	.word	0x0800340e

08000938 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000938:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800093a:	4815      	ldr	r0, [pc, #84]	; (8000990 <MX_TIM3_Init+0x58>)
  htim3.Init.Prescaler = 0;
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_TIM3_Init+0x5c>)
 800093e:	2400      	movs	r4, #0
{
 8000940:	b08c      	sub	sp, #48	; 0x30
  htim3.Init.Prescaler = 0;
 8000942:	e880 0018 	stmia.w	r0, {r3, r4}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 480;
 8000946:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800094a:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800094c:	2303      	movs	r3, #3
 800094e:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000950:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000952:	2301      	movs	r3, #1
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	6084      	str	r4, [r0, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000956:	6104      	str	r4, [r0, #16]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000958:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800095a:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800095c:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 800095e:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000960:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000962:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000964:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000966:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000968:	f001 fbb8 	bl	80020dc <HAL_TIM_Encoder_Init>
 800096c:	b118      	cbz	r0, 8000976 <MX_TIM3_Init+0x3e>
  {
    _Error_Handler(__FILE__, __LINE__);
 800096e:	219a      	movs	r1, #154	; 0x9a
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <MX_TIM3_Init+0x60>)
 8000972:	f7ff ff09 	bl	8000788 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000976:	a901      	add	r1, sp, #4
 8000978:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_TIM3_Init+0x58>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097a:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800097e:	f001 fddb 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	b118      	cbz	r0, 800098c <MX_TIM3_Init+0x54>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000984:	21a1      	movs	r1, #161	; 0xa1
 8000986:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_TIM3_Init+0x60>)
 8000988:	f7ff fefe 	bl	8000788 <_Error_Handler>
  }

}
 800098c:	b00c      	add	sp, #48	; 0x30
 800098e:	bd10      	pop	{r4, pc}
 8000990:	200006bc 	.word	0x200006bc
 8000994:	40000400 	.word	0x40000400
 8000998:	0800340e 	.word	0x0800340e

0800099c <MX_TIM8_Init>:
  HAL_TIM_MspPostInit(&htim4);

}
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800099c:	b510      	push	{r4, lr}
  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim8.Instance = TIM8;
 800099e:	4816      	ldr	r0, [pc, #88]	; (80009f8 <MX_TIM8_Init+0x5c>)
  htim8.Init.Prescaler = 0;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <MX_TIM8_Init+0x60>)
 80009a2:	2400      	movs	r4, #0
{
 80009a4:	b08c      	sub	sp, #48	; 0x30
  htim8.Init.Prescaler = 0;
 80009a6:	e880 0018 	stmia.w	r0, {r3, r4}
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim8.Init.Period = 480;
 80009aa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80009ae:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim8.Init.RepetitionCounter = 0;
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009b0:	2303      	movs	r3, #3
 80009b2:	9303      	str	r3, [sp, #12]
  sConfig.IC1Filter = 0;
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
  sConfig.IC2Filter = 0;
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80009b4:	a903      	add	r1, sp, #12
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009b6:	2301      	movs	r3, #1
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	6084      	str	r4, [r0, #8]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ba:	6104      	str	r4, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80009bc:	6144      	str	r4, [r0, #20]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009be:	9404      	str	r4, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009c0:	9305      	str	r3, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009c2:	9406      	str	r4, [sp, #24]
  sConfig.IC1Filter = 0;
 80009c4:	9407      	str	r4, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009c6:	9408      	str	r4, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009c8:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009ca:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009cc:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80009ce:	f001 fb85 	bl	80020dc <HAL_TIM_Encoder_Init>
 80009d2:	b118      	cbz	r0, 80009dc <MX_TIM8_Init+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 80009d4:	21ee      	movs	r1, #238	; 0xee
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <MX_TIM8_Init+0x64>)
 80009d8:	f7ff fed6 	bl	8000788 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009dc:	a901      	add	r1, sp, #4
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_TIM8_Init+0x5c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e2:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009e4:	f001 fda8 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 80009e8:	b118      	cbz	r0, 80009f2 <MX_TIM8_Init+0x56>
  {
    _Error_Handler(__FILE__, __LINE__);
 80009ea:	21f5      	movs	r1, #245	; 0xf5
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_TIM8_Init+0x64>)
 80009ee:	f7ff fecb 	bl	8000788 <_Error_Handler>
  }

}
 80009f2:	b00c      	add	sp, #48	; 0x30
 80009f4:	bd10      	pop	{r4, pc}
 80009f6:	bf00      	nop
 80009f8:	20000644 	.word	0x20000644
 80009fc:	40010400 	.word	0x40010400
 8000a00:	0800340e 	.word	0x0800340e

08000a04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000a04:	b500      	push	{lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(tim_encoderHandle->Instance==TIM1)
 8000a06:	6803      	ldr	r3, [r0, #0]
 8000a08:	4a36      	ldr	r2, [pc, #216]	; (8000ae4 <HAL_TIM_Encoder_MspInit+0xe0>)
 8000a0a:	4293      	cmp	r3, r2
{
 8000a0c:	b08b      	sub	sp, #44	; 0x2c
  if(tim_encoderHandle->Instance==TIM1)
 8000a0e:	d11c      	bne.n	8000a4a <HAL_TIM_Encoder_MspInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1a:	4833      	ldr	r0, [pc, #204]	; (8000ae8 <HAL_TIM_Encoder_MspInit+0xe4>)
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1c:	f041 0101 	orr.w	r1, r1, #1
 8000a20:	6451      	str	r1, [r2, #68]	; 0x44
 8000a22:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	9307      	str	r3, [sp, #28]
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a26:	f002 0201 	and.w	r2, r2, #1
 8000a2a:	9201      	str	r2, [sp, #4]
 8000a2c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000a30:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8000a34:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a36:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2202      	movs	r2, #2
 8000a3a:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a3c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a3e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f000 fc62 	bl	8001308 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8000a44:	b00b      	add	sp, #44	; 0x2c
 8000a46:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_encoderHandle->Instance==TIM2)
 8000a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a4e:	d116      	bne.n	8000a7e <HAL_TIM_Encoder_MspInit+0x7a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	4a26      	ldr	r2, [pc, #152]	; (8000aec <HAL_TIM_Encoder_MspInit+0xe8>)
 8000a54:	9302      	str	r3, [sp, #8]
 8000a56:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000a58:	f041 0101 	orr.w	r1, r1, #1
 8000a5c:	6411      	str	r1, [r2, #64]	; 0x40
 8000a5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	9307      	str	r3, [sp, #28]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a62:	f002 0201 	and.w	r2, r2, #1
 8000a66:	9202      	str	r2, [sp, #8]
 8000a68:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a70:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2202      	movs	r2, #2
 8000a74:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a76:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	a905      	add	r1, sp, #20
 8000a7a:	481d      	ldr	r0, [pc, #116]	; (8000af0 <HAL_TIM_Encoder_MspInit+0xec>)
 8000a7c:	e7e0      	b.n	8000a40 <HAL_TIM_Encoder_MspInit+0x3c>
  else if(tim_encoderHandle->Instance==TIM3)
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d114      	bne.n	8000aae <HAL_TIM_Encoder_MspInit+0xaa>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8000a8a:	9303      	str	r3, [sp, #12]
 8000a8c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000a8e:	f041 0102 	orr.w	r1, r1, #2
 8000a92:	6411      	str	r1, [r2, #64]	; 0x40
 8000a94:	6c12      	ldr	r2, [r2, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	9307      	str	r3, [sp, #28]
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a98:	f002 0202 	and.w	r2, r2, #2
 8000a9c:	9203      	str	r2, [sp, #12]
 8000a9e:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aa2:	22c0      	movs	r2, #192	; 0xc0
 8000aa4:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8000aac:	e7e4      	b.n	8000a78 <HAL_TIM_Encoder_MspInit+0x74>
  else if(tim_encoderHandle->Instance==TIM8)
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d1c7      	bne.n	8000a44 <HAL_TIM_Encoder_MspInit+0x40>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8000aba:	9304      	str	r3, [sp, #16]
 8000abc:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000abe:	480f      	ldr	r0, [pc, #60]	; (8000afc <HAL_TIM_Encoder_MspInit+0xf8>)
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ac0:	f041 0102 	orr.w	r1, r1, #2
 8000ac4:	6451      	str	r1, [r2, #68]	; 0x44
 8000ac6:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	9307      	str	r3, [sp, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000aca:	f002 0202 	and.w	r2, r2, #2
 8000ace:	9204      	str	r2, [sp, #16]
 8000ad0:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ad4:	22c0      	movs	r2, #192	; 0xc0
 8000ad6:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ad8:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2202      	movs	r2, #2
 8000adc:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ade:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae0:	a905      	add	r1, sp, #20
 8000ae2:	e7ad      	b.n	8000a40 <HAL_TIM_Encoder_MspInit+0x3c>
 8000ae4:	40010000 	.word	0x40010000
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000
 8000af4:	40000400 	.word	0x40000400
 8000af8:	40010400 	.word	0x40010400
 8000afc:	40020800 	.word	0x40020800

08000b00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 8000b00:	6802      	ldr	r2, [r0, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_TIM_PWM_MspInit+0x28>)
 8000b04:	429a      	cmp	r2, r3
{
 8000b06:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM4)
 8000b08:	d10b      	bne.n	8000b22 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	9301      	str	r3, [sp, #4]
 8000b0e:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <HAL_TIM_PWM_MspInit+0x2c>)
 8000b10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b12:	f042 0204 	orr.w	r2, r2, #4
 8000b16:	641a      	str	r2, [r3, #64]	; 0x40
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000b22:	b002      	add	sp, #8
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40000800 	.word	0x40000800
 8000b2c:	40023800 	.word	0x40023800

08000b30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(timHandle->Instance==TIM4)
 8000b32:	6802      	ldr	r2, [r0, #0]
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_TIM_MspPostInit+0x2c>)
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10c      	bne.n	8000b54 <HAL_TIM_MspPostInit+0x24>
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000b3a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000b40:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <HAL_TIM_MspPostInit+0x30>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b4e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b50:	f000 fbda 	bl	8001308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000b54:	b007      	add	sp, #28
 8000b56:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b5a:	bf00      	nop
 8000b5c:	40000800 	.word	0x40000800
 8000b60:	40020400 	.word	0x40020400

08000b64 <MX_TIM4_Init>:
{
 8000b64:	b510      	push	{r4, lr}
  htim4.Instance = TIM4;
 8000b66:	4829      	ldr	r0, [pc, #164]	; (8000c0c <MX_TIM4_Init+0xa8>)
  htim4.Init.Prescaler = 24;
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <MX_TIM4_Init+0xac>)
 8000b6a:	f04f 0c18 	mov.w	ip, #24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6e:	2400      	movs	r4, #0
{
 8000b70:	b08a      	sub	sp, #40	; 0x28
  htim4.Init.Prescaler = 24;
 8000b72:	e880 1008 	stmia.w	r0, {r3, ip}
  htim4.Init.Period = 1000;
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	6084      	str	r4, [r0, #8]
  htim4.Init.Period = 1000;
 8000b7c:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	6104      	str	r4, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b80:	f001 fa34 	bl	8001fec <HAL_TIM_PWM_Init>
 8000b84:	b118      	cbz	r0, 8000b8e <MX_TIM4_Init+0x2a>
    _Error_Handler(__FILE__, __LINE__);
 8000b86:	21b2      	movs	r1, #178	; 0xb2
 8000b88:	4822      	ldr	r0, [pc, #136]	; (8000c14 <MX_TIM4_Init+0xb0>)
 8000b8a:	f7ff fdfd 	bl	8000788 <_Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b8e:	a901      	add	r1, sp, #4
 8000b90:	481e      	ldr	r0, [pc, #120]	; (8000c0c <MX_TIM4_Init+0xa8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b92:	9401      	str	r4, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	9402      	str	r4, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b96:	f001 fccf 	bl	8002538 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	b118      	cbz	r0, 8000ba4 <MX_TIM4_Init+0x40>
    _Error_Handler(__FILE__, __LINE__);
 8000b9c:	21b9      	movs	r1, #185	; 0xb9
 8000b9e:	481d      	ldr	r0, [pc, #116]	; (8000c14 <MX_TIM4_Init+0xb0>)
 8000ba0:	f7ff fdf2 	bl	8000788 <_Error_Handler>
  sConfigOC.Pulse = 0;
 8000ba4:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ba8:	a903      	add	r1, sp, #12
 8000baa:	4818      	ldr	r0, [pc, #96]	; (8000c0c <MX_TIM4_Init+0xa8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bac:	9303      	str	r3, [sp, #12]
  sConfigOC.Pulse = 0;
 8000bae:	9204      	str	r2, [sp, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb0:	9205      	str	r2, [sp, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb2:	9207      	str	r2, [sp, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb4:	f001 fb98 	bl	80022e8 <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	b118      	cbz	r0, 8000bc2 <MX_TIM4_Init+0x5e>
    _Error_Handler(__FILE__, __LINE__);
 8000bba:	21c2      	movs	r1, #194	; 0xc2
 8000bbc:	4815      	ldr	r0, [pc, #84]	; (8000c14 <MX_TIM4_Init+0xb0>)
 8000bbe:	f7ff fde3 	bl	8000788 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	a903      	add	r1, sp, #12
 8000bc6:	4811      	ldr	r0, [pc, #68]	; (8000c0c <MX_TIM4_Init+0xa8>)
 8000bc8:	f001 fb8e 	bl	80022e8 <HAL_TIM_PWM_ConfigChannel>
 8000bcc:	b118      	cbz	r0, 8000bd6 <MX_TIM4_Init+0x72>
    _Error_Handler(__FILE__, __LINE__);
 8000bce:	21c7      	movs	r1, #199	; 0xc7
 8000bd0:	4810      	ldr	r0, [pc, #64]	; (8000c14 <MX_TIM4_Init+0xb0>)
 8000bd2:	f7ff fdd9 	bl	8000788 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	a903      	add	r1, sp, #12
 8000bda:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_TIM4_Init+0xa8>)
 8000bdc:	f001 fb84 	bl	80022e8 <HAL_TIM_PWM_ConfigChannel>
 8000be0:	b118      	cbz	r0, 8000bea <MX_TIM4_Init+0x86>
    _Error_Handler(__FILE__, __LINE__);
 8000be2:	21cc      	movs	r1, #204	; 0xcc
 8000be4:	480b      	ldr	r0, [pc, #44]	; (8000c14 <MX_TIM4_Init+0xb0>)
 8000be6:	f7ff fdcf 	bl	8000788 <_Error_Handler>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bea:	220c      	movs	r2, #12
 8000bec:	eb0d 0102 	add.w	r1, sp, r2
 8000bf0:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_TIM4_Init+0xa8>)
 8000bf2:	f001 fb79 	bl	80022e8 <HAL_TIM_PWM_ConfigChannel>
 8000bf6:	b118      	cbz	r0, 8000c00 <MX_TIM4_Init+0x9c>
    _Error_Handler(__FILE__, __LINE__);
 8000bf8:	21d1      	movs	r1, #209	; 0xd1
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <MX_TIM4_Init+0xb0>)
 8000bfc:	f7ff fdc4 	bl	8000788 <_Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <MX_TIM4_Init+0xa8>)
 8000c02:	f7ff ff95 	bl	8000b30 <HAL_TIM_MspPostInit>
}
 8000c06:	b00a      	add	sp, #40	; 0x28
 8000c08:	bd10      	pop	{r4, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000680 	.word	0x20000680
 8000c10:	40000800 	.word	0x40000800
 8000c14:	0800340e 	.word	0x0800340e

08000c18 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c18:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
 8000c1a:	480c      	ldr	r0, [pc, #48]	; (8000c4c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <MX_USART2_UART_Init+0x38>)
 8000c1e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 8000c22:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c26:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c2e:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c30:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c32:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c36:	f001 fe25 	bl	8002884 <HAL_UART_Init>
 8000c3a:	b128      	cbz	r0, 8000c48 <MX_USART2_UART_Init+0x30>
  {
    _Error_Handler(__FILE__, __LINE__);
 8000c3c:	214f      	movs	r1, #79	; 0x4f
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_USART2_UART_Init+0x3c>)
  }

}
 8000c40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8000c44:	f7ff bda0 	b.w	8000788 <_Error_Handler>
 8000c48:	bd08      	pop	{r3, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000830 	.word	0x20000830
 8000c50:	40004400 	.word	0x40004400
 8000c54:	08003420 	.word	0x08003420

08000c58 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c58:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8000c5a:	6802      	ldr	r2, [r0, #0]
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <HAL_UART_MspInit+0xbc>)
 8000c5e:	429a      	cmp	r2, r3
{
 8000c60:	b086      	sub	sp, #24
 8000c62:	4606      	mov	r6, r0
  if(uartHandle->Instance==USART2)
 8000c64:	d154      	bne.n	8000d10 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c66:	2500      	movs	r5, #0
 8000c68:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000c6c:	9500      	str	r5, [sp, #0]
 8000c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	4829      	ldr	r0, [pc, #164]	; (8000d18 <HAL_UART_MspInit+0xc0>)

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000c72:	4c2a      	ldr	r4, [pc, #168]	; (8000d1c <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c74:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000c78:	641a      	str	r2, [r3, #64]	; 0x40
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c80:	9300      	str	r3, [sp, #0]
 8000c82:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c84:	230c      	movs	r3, #12
 8000c86:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c96:	2307      	movs	r3, #7
 8000c98:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f000 fb35 	bl	8001308 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_UART_MspInit+0xc8>)
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca0:	60e5      	str	r5, [r4, #12]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ca2:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8000ca6:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8000caa:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb2:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cb4:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cba:	6165      	str	r5, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cbc:	61a5      	str	r5, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000cbe:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc0:	6225      	str	r5, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cc2:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000cc4:	f000 f93e 	bl	8000f44 <HAL_DMA_Init>
 8000cc8:	b118      	cbz	r0, 8000cd2 <HAL_UART_MspInit+0x7a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000cca:	2179      	movs	r1, #121	; 0x79
 8000ccc:	4815      	ldr	r0, [pc, #84]	; (8000d24 <HAL_UART_MspInit+0xcc>)
 8000cce:	f7ff fd5b 	bl	8000788 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000cd2:	6334      	str	r4, [r6, #48]	; 0x30

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000cd4:	4814      	ldr	r0, [pc, #80]	; (8000d28 <HAL_UART_MspInit+0xd0>)
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000cd6:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000cd8:	4c14      	ldr	r4, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0xd4>)
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000cda:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cde:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ce2:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	6122      	str	r2, [r4, #16]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce8:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000cea:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cee:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf0:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cf2:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf4:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf6:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000cf8:	61e2      	str	r2, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cfa:	6223      	str	r3, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cfc:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000cfe:	f000 f921 	bl	8000f44 <HAL_DMA_Init>
 8000d02:	b118      	cbz	r0, 8000d0c <HAL_UART_MspInit+0xb4>
    {
      _Error_Handler(__FILE__, __LINE__);
 8000d04:	218b      	movs	r1, #139	; 0x8b
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <HAL_UART_MspInit+0xcc>)
 8000d08:	f7ff fd3e 	bl	8000788 <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000d0c:	6374      	str	r4, [r6, #52]	; 0x34
 8000d0e:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d10:	b006      	add	sp, #24
 8000d12:	bd70      	pop	{r4, r5, r6, pc}
 8000d14:	40004400 	.word	0x40004400
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	200007d0 	.word	0x200007d0
 8000d20:	400260a0 	.word	0x400260a0
 8000d24:	08003420 	.word	0x08003420
 8000d28:	40026088 	.word	0x40026088
 8000d2c:	20000770 	.word	0x20000770

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_InitTick+0x3c>)
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_InitTick+0x40>)
{
 8000d36:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d38:	7818      	ldrb	r0, [r3, #0]
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d42:	6810      	ldr	r0, [r2, #0]
 8000d44:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d48:	f000 f8b8 	bl	8000ebc <HAL_SYSTICK_Config>
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	b958      	cbnz	r0, 8000d68 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d50:	2d0f      	cmp	r5, #15
 8000d52:	d809      	bhi.n	8000d68 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d54:	4602      	mov	r2, r0
 8000d56:	4629      	mov	r1, r5
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295
 8000d5c:	f000 f856 	bl	8000e0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <HAL_InitTick+0x44>)
 8000d62:	4620      	mov	r0, r4
 8000d64:	601d      	str	r5, [r3, #0]
 8000d66:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d68:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d6a:	bd38      	pop	{r3, r4, r5, pc}
 8000d6c:	20000000 	.word	0x20000000
 8000d70:	20000004 	.word	0x20000004
 8000d74:	20000008 	.word	0x20000008

08000d78 <HAL_Init>:
{
 8000d78:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <HAL_Init+0x30>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d82:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d8a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d92:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f81b 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9a:	200f      	movs	r0, #15
 8000d9c:	f7ff ffc8 	bl	8000d30 <HAL_InitTick>
  HAL_MspInit();
 8000da0:	f7ff fcf4 	bl	800078c <HAL_MspInit>
}
 8000da4:	2000      	movs	r0, #0
 8000da6:	bd08      	pop	{r3, pc}
 8000da8:	40023c00 	.word	0x40023c00

08000dac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000dac:	4a03      	ldr	r2, [pc, #12]	; (8000dbc <HAL_IncTick+0x10>)
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_IncTick+0x14>)
 8000db0:	6811      	ldr	r1, [r2, #0]
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	440b      	add	r3, r1
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000870 	.word	0x20000870
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dc4:	4b01      	ldr	r3, [pc, #4]	; (8000dcc <HAL_GetTick+0x8>)
 8000dc6:	6818      	ldr	r0, [r3, #0]
}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	20000870 	.word	0x20000870

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000dd0:	1ec3      	subs	r3, r0, #3
 8000dd2:	2b04      	cmp	r3, #4
{
 8000dd4:	b510      	push	{r4, lr}
 8000dd6:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000dd8:	d903      	bls.n	8000de2 <HAL_NVIC_SetPriorityGrouping+0x12>
 8000dda:	21a2      	movs	r1, #162	; 0xa2
 8000ddc:	4809      	ldr	r0, [pc, #36]	; (8000e04 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000dde:	f7ff fcd4 	bl	800078a <assert_failed>
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <HAL_NVIC_SetPriorityGrouping+0x38>)
 8000de4:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000dea:	041b      	lsls	r3, r3, #16
 8000dec:	0c1b      	lsrs	r3, r3, #16
 8000dee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000df2:	0224      	lsls	r4, r4, #8
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000dfc:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000dfe:	60d4      	str	r4, [r2, #12]
 8000e00:	bd10      	pop	{r4, pc}
 8000e02:	bf00      	nop
 8000e04:	08003434 	.word	0x08003434
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000e0c:	2a0f      	cmp	r2, #15
{ 
 8000e0e:	b570      	push	{r4, r5, r6, lr}
 8000e10:	4604      	mov	r4, r0
 8000e12:	460e      	mov	r6, r1
 8000e14:	4615      	mov	r5, r2
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000e16:	d903      	bls.n	8000e20 <HAL_NVIC_SetPriority+0x14>
 8000e18:	21ba      	movs	r1, #186	; 0xba
 8000e1a:	481a      	ldr	r0, [pc, #104]	; (8000e84 <HAL_NVIC_SetPriority+0x78>)
 8000e1c:	f7ff fcb5 	bl	800078a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000e20:	2e0f      	cmp	r6, #15
 8000e22:	d903      	bls.n	8000e2c <HAL_NVIC_SetPriority+0x20>
 8000e24:	21bb      	movs	r1, #187	; 0xbb
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <HAL_NVIC_SetPriority+0x78>)
 8000e28:	f7ff fcaf 	bl	800078a <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_NVIC_SetPriority+0x7c>)
 8000e2e:	68d9      	ldr	r1, [r3, #12]
 8000e30:	f3c1 2102 	ubfx	r1, r1, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e34:	f1c1 0307 	rsb	r3, r1, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e38:	1d0a      	adds	r2, r1, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3a:	2b04      	cmp	r3, #4
 8000e3c:	bf28      	it	cs
 8000e3e:	2304      	movcs	r3, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	2001      	movs	r0, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e42:	2a06      	cmp	r2, #6
 8000e44:	bf8c      	ite	hi
 8000e46:	3903      	subhi	r1, #3
 8000e48:	2100      	movls	r1, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e4e:	3a01      	subs	r2, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	4088      	lsls	r0, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e52:	4032      	ands	r2, r6
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e54:	3801      	subs	r0, #1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e56:	408a      	lsls	r2, r1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	4005      	ands	r5, r0
  if ((int32_t)(IRQn) < 0)
 8000e5a:	2c00      	cmp	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	ea42 0205 	orr.w	r2, r2, r5
 8000e60:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	bfaf      	iteee	ge
 8000e66:	f104 4460 	addge.w	r4, r4, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	f004 040f 	andlt.w	r4, r4, #15
 8000e6e:	4b07      	ldrlt	r3, [pc, #28]	; (8000e8c <HAL_NVIC_SetPriority+0x80>)
 8000e70:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	bfa5      	ittet	ge
 8000e74:	f504 4461 	addge.w	r4, r4, #57600	; 0xe100
 8000e78:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	551a      	strblt	r2, [r3, r4]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	f884 2300 	strbge.w	r2, [r4, #768]	; 0x300
 8000e80:	bd70      	pop	{r4, r5, r6, pc}
 8000e82:	bf00      	nop
 8000e84:	08003434 	.word	0x08003434
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	e000ed14 	.word	0xe000ed14

08000e90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000e92:	1e04      	subs	r4, r0, #0
 8000e94:	da03      	bge.n	8000e9e <HAL_NVIC_EnableIRQ+0xe>
 8000e96:	21ce      	movs	r1, #206	; 0xce
 8000e98:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <HAL_NVIC_EnableIRQ+0x24>)
 8000e9a:	f7ff fc76 	bl	800078a <assert_failed>
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000e9e:	0962      	lsrs	r2, r4, #5
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	f004 041f 	and.w	r4, r4, #31
 8000ea6:	fa03 f404 	lsl.w	r4, r3, r4
 8000eaa:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <HAL_NVIC_EnableIRQ+0x28>)
 8000eac:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	bf00      	nop
 8000eb4:	08003434 	.word	0x08003434
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	3801      	subs	r0, #1
 8000ebe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ec2:	d20a      	bcs.n	8000eda <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	4a07      	ldr	r2, [pc, #28]	; (8000ee4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eca:	21f0      	movs	r1, #240	; 0xf0
 8000ecc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000eda:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <HAL_SYSTICK_CLKSourceConfig>:
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000ee8:	2804      	cmp	r0, #4
{
 8000eea:	b510      	push	{r4, lr}
 8000eec:	4c08      	ldr	r4, [pc, #32]	; (8000f10 <HAL_SYSTICK_CLKSourceConfig+0x28>)
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
 8000eee:	d00a      	beq.n	8000f06 <HAL_SYSTICK_CLKSourceConfig+0x1e>
 8000ef0:	b120      	cbz	r0, 8000efc <HAL_SYSTICK_CLKSourceConfig+0x14>
 8000ef2:	f240 11d9 	movw	r1, #473	; 0x1d9
 8000ef6:	4807      	ldr	r0, [pc, #28]	; (8000f14 <HAL_SYSTICK_CLKSourceConfig+0x2c>)
 8000ef8:	f7ff fc47 	bl	800078a <assert_failed>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	f023 0304 	bic.w	r3, r3, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000f02:	6023      	str	r3, [r4, #0]
 8000f04:	bd10      	pop	{r4, pc}
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	e7f9      	b.n	8000f02 <HAL_SYSTICK_CLKSourceConfig+0x1a>
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010
 8000f14:	08003434 	.word	0x08003434

08000f18 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000f18:	6803      	ldr	r3, [r0, #0]
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8000f20:	f023 0303 	bic.w	r3, r3, #3
 8000f24:	2118      	movs	r1, #24
 8000f26:	3a10      	subs	r2, #16
 8000f28:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f2c:	4904      	ldr	r1, [pc, #16]	; (8000f40 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8000f2e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000f30:	bf88      	it	hi
 8000f32:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f34:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000f36:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000f38:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000f3a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	080034a7 	.word	0x080034a7

08000f44 <HAL_DMA_Init>:
{
 8000f44:	b570      	push	{r4, r5, r6, lr}
 8000f46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff ff3c 	bl	8000dc4 <HAL_GetTick>
 8000f4c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000f4e:	2c00      	cmp	r4, #0
 8000f50:	f000 8117 	beq.w	8001182 <HAL_DMA_Init+0x23e>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	4a8c      	ldr	r2, [pc, #560]	; (8001188 <HAL_DMA_Init+0x244>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d031      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f5c:	3218      	adds	r2, #24
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d02e      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f62:	3218      	adds	r2, #24
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d02b      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f68:	3218      	adds	r2, #24
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d028      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f6e:	3218      	adds	r2, #24
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d025      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f74:	3218      	adds	r2, #24
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d022      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f7a:	3218      	adds	r2, #24
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d01f      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f80:	3218      	adds	r2, #24
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d01c      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f86:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d018      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f8e:	3218      	adds	r2, #24
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d015      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f94:	3218      	adds	r2, #24
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d012      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000f9a:	3218      	adds	r2, #24
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d00f      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000fa0:	3218      	adds	r2, #24
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00c      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000fa6:	3218      	adds	r2, #24
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d009      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000fac:	3218      	adds	r2, #24
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d006      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000fb2:	3218      	adds	r2, #24
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d003      	beq.n	8000fc0 <HAL_DMA_Init+0x7c>
 8000fb8:	21c8      	movs	r1, #200	; 0xc8
 8000fba:	4874      	ldr	r0, [pc, #464]	; (800118c <HAL_DMA_Init+0x248>)
 8000fbc:	f7ff fbe5 	bl	800078a <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8000fc0:	6863      	ldr	r3, [r4, #4]
 8000fc2:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 8000fc6:	d006      	beq.n	8000fd6 <HAL_DMA_Init+0x92>
 8000fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000fcc:	d003      	beq.n	8000fd6 <HAL_DMA_Init+0x92>
 8000fce:	21c9      	movs	r1, #201	; 0xc9
 8000fd0:	486e      	ldr	r0, [pc, #440]	; (800118c <HAL_DMA_Init+0x248>)
 8000fd2:	f7ff fbda 	bl	800078a <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8000fd6:	68a3      	ldr	r3, [r4, #8]
 8000fd8:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8000fdc:	d005      	beq.n	8000fea <HAL_DMA_Init+0xa6>
 8000fde:	2b80      	cmp	r3, #128	; 0x80
 8000fe0:	d003      	beq.n	8000fea <HAL_DMA_Init+0xa6>
 8000fe2:	21ca      	movs	r1, #202	; 0xca
 8000fe4:	4869      	ldr	r0, [pc, #420]	; (800118c <HAL_DMA_Init+0x248>)
 8000fe6:	f7ff fbd0 	bl	800078a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8000fea:	68e3      	ldr	r3, [r4, #12]
 8000fec:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8000ff0:	d003      	beq.n	8000ffa <HAL_DMA_Init+0xb6>
 8000ff2:	21cb      	movs	r1, #203	; 0xcb
 8000ff4:	4865      	ldr	r0, [pc, #404]	; (800118c <HAL_DMA_Init+0x248>)
 8000ff6:	f7ff fbc8 	bl	800078a <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8000ffa:	6923      	ldr	r3, [r4, #16]
 8000ffc:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8001000:	d003      	beq.n	800100a <HAL_DMA_Init+0xc6>
 8001002:	21cc      	movs	r1, #204	; 0xcc
 8001004:	4861      	ldr	r0, [pc, #388]	; (800118c <HAL_DMA_Init+0x248>)
 8001006:	f7ff fbc0 	bl	800078a <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800100a:	6963      	ldr	r3, [r4, #20]
 800100c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8001010:	d006      	beq.n	8001020 <HAL_DMA_Init+0xdc>
 8001012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001016:	d003      	beq.n	8001020 <HAL_DMA_Init+0xdc>
 8001018:	21cd      	movs	r1, #205	; 0xcd
 800101a:	485c      	ldr	r0, [pc, #368]	; (800118c <HAL_DMA_Init+0x248>)
 800101c:	f7ff fbb5 	bl	800078a <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001020:	69a3      	ldr	r3, [r4, #24]
 8001022:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8001026:	d006      	beq.n	8001036 <HAL_DMA_Init+0xf2>
 8001028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800102c:	d003      	beq.n	8001036 <HAL_DMA_Init+0xf2>
 800102e:	21ce      	movs	r1, #206	; 0xce
 8001030:	4856      	ldr	r0, [pc, #344]	; (800118c <HAL_DMA_Init+0x248>)
 8001032:	f7ff fbaa 	bl	800078a <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001036:	69e3      	ldr	r3, [r4, #28]
 8001038:	f033 0220 	bics.w	r2, r3, #32
 800103c:	d006      	beq.n	800104c <HAL_DMA_Init+0x108>
 800103e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001042:	d003      	beq.n	800104c <HAL_DMA_Init+0x108>
 8001044:	21cf      	movs	r1, #207	; 0xcf
 8001046:	4851      	ldr	r0, [pc, #324]	; (800118c <HAL_DMA_Init+0x248>)
 8001048:	f7ff fb9f 	bl	800078a <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800104c:	6a23      	ldr	r3, [r4, #32]
 800104e:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8001052:	d003      	beq.n	800105c <HAL_DMA_Init+0x118>
 8001054:	21d0      	movs	r1, #208	; 0xd0
 8001056:	484d      	ldr	r0, [pc, #308]	; (800118c <HAL_DMA_Init+0x248>)
 8001058:	f7ff fb97 	bl	800078a <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800105c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800105e:	f033 0304 	bics.w	r3, r3, #4
 8001062:	d003      	beq.n	800106c <HAL_DMA_Init+0x128>
 8001064:	21d1      	movs	r1, #209	; 0xd1
 8001066:	4849      	ldr	r0, [pc, #292]	; (800118c <HAL_DMA_Init+0x248>)
 8001068:	f7ff fb8f 	bl	800078a <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800106c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800106e:	b1b3      	cbz	r3, 800109e <HAL_DMA_Init+0x15a>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001070:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001072:	2b03      	cmp	r3, #3
 8001074:	d903      	bls.n	800107e <HAL_DMA_Init+0x13a>
 8001076:	21d6      	movs	r1, #214	; 0xd6
 8001078:	4844      	ldr	r0, [pc, #272]	; (800118c <HAL_DMA_Init+0x248>)
 800107a:	f7ff fb86 	bl	800078a <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800107e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001080:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8001084:	d003      	beq.n	800108e <HAL_DMA_Init+0x14a>
 8001086:	21d7      	movs	r1, #215	; 0xd7
 8001088:	4840      	ldr	r0, [pc, #256]	; (800118c <HAL_DMA_Init+0x248>)
 800108a:	f7ff fb7e 	bl	800078a <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800108e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001090:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8001094:	d003      	beq.n	800109e <HAL_DMA_Init+0x15a>
 8001096:	21d8      	movs	r1, #216	; 0xd8
 8001098:	483c      	ldr	r0, [pc, #240]	; (800118c <HAL_DMA_Init+0x248>)
 800109a:	f7ff fb76 	bl	800078a <assert_failed>
  __HAL_UNLOCK(hdma);
 800109e:	2300      	movs	r3, #0
 80010a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80010a4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80010a6:	2302      	movs	r3, #2
 80010a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80010ac:	6813      	ldr	r3, [r2, #0]
 80010ae:	f023 0301 	bic.w	r3, r3, #1
 80010b2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010b4:	6821      	ldr	r1, [r4, #0]
 80010b6:	680b      	ldr	r3, [r1, #0]
 80010b8:	07d8      	lsls	r0, r3, #31
 80010ba:	d43c      	bmi.n	8001136 <HAL_DMA_Init+0x1f2>
  tmp = hdma->Instance->CR;
 80010bc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010be:	4d34      	ldr	r5, [pc, #208]	; (8001190 <HAL_DMA_Init+0x24c>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c0:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010c2:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010c4:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c6:	68a3      	ldr	r3, [r4, #8]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	68e2      	ldr	r2, [r4, #12]
 80010cc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ce:	6922      	ldr	r2, [r4, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	6962      	ldr	r2, [r4, #20]
 80010d4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	69e2      	ldr	r2, [r4, #28]
 80010d8:	4303      	orrs	r3, r0
 80010da:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80010dc:	6a22      	ldr	r2, [r4, #32]
 80010de:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010e0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010e2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010e4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010e8:	bf01      	itttt	eq
 80010ea:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80010ec:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80010ee:	4335      	orreq	r5, r6
 80010f0:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80010f2:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80010f4:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f6:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010f8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80010fc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001100:	d10b      	bne.n	800111a <HAL_DMA_Init+0x1d6>
    tmp |= hdma->Init.FIFOThreshold;
 8001102:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001104:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001106:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001108:	b13d      	cbz	r5, 800111a <HAL_DMA_Init+0x1d6>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800110a:	b9f8      	cbnz	r0, 800114c <HAL_DMA_Init+0x208>
  {
    switch (tmp)
 800110c:	2a01      	cmp	r2, #1
 800110e:	d02d      	beq.n	800116c <HAL_DMA_Init+0x228>
 8001110:	d301      	bcc.n	8001116 <HAL_DMA_Init+0x1d2>
 8001112:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001114:	d101      	bne.n	800111a <HAL_DMA_Init+0x1d6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001116:	01ea      	lsls	r2, r5, #7
 8001118:	d42b      	bmi.n	8001172 <HAL_DMA_Init+0x22e>
  hdma->Instance->FCR = tmp;
 800111a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800111c:	4620      	mov	r0, r4
 800111e:	f7ff fefb 	bl	8000f18 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001122:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001124:	233f      	movs	r3, #63	; 0x3f
 8001126:	4093      	lsls	r3, r2
 8001128:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800112c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001130:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001134:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001136:	f7ff fe45 	bl	8000dc4 <HAL_GetTick>
 800113a:	1b40      	subs	r0, r0, r5
 800113c:	2805      	cmp	r0, #5
 800113e:	d9b9      	bls.n	80010b4 <HAL_DMA_Init+0x170>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001140:	2320      	movs	r3, #32
 8001142:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001144:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001146:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800114a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800114c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001150:	d113      	bne.n	800117a <HAL_DMA_Init+0x236>
    switch (tmp)
 8001152:	2a03      	cmp	r2, #3
 8001154:	d8e1      	bhi.n	800111a <HAL_DMA_Init+0x1d6>
 8001156:	a001      	add	r0, pc, #4	; (adr r0, 800115c <HAL_DMA_Init+0x218>)
 8001158:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800115c:	08001173 	.word	0x08001173
 8001160:	08001117 	.word	0x08001117
 8001164:	08001173 	.word	0x08001173
 8001168:	0800116d 	.word	0x0800116d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800116c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001170:	d1d3      	bne.n	800111a <HAL_DMA_Init+0x1d6>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001172:	2340      	movs	r3, #64	; 0x40
 8001174:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001176:	2001      	movs	r0, #1
 8001178:	e7e5      	b.n	8001146 <HAL_DMA_Init+0x202>
    switch (tmp)
 800117a:	2a02      	cmp	r2, #2
 800117c:	d9f9      	bls.n	8001172 <HAL_DMA_Init+0x22e>
 800117e:	2a03      	cmp	r2, #3
 8001180:	e7c8      	b.n	8001114 <HAL_DMA_Init+0x1d0>
    return HAL_ERROR;
 8001182:	2001      	movs	r0, #1
 8001184:	bd70      	pop	{r4, r5, r6, pc}
 8001186:	bf00      	nop
 8001188:	40026010 	.word	0x40026010
 800118c:	0800346f 	.word	0x0800346f
 8001190:	f010803f 	.word	0xf010803f

08001194 <HAL_DMA_IRQHandler>:
{
 8001194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800119a:	4b5a      	ldr	r3, [pc, #360]	; (8001304 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800119e:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80011a2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011a4:	2208      	movs	r2, #8
 80011a6:	409a      	lsls	r2, r3
 80011a8:	4216      	tst	r6, r2
{
 80011aa:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011ac:	d00c      	beq.n	80011c8 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011ae:	6801      	ldr	r1, [r0, #0]
 80011b0:	6808      	ldr	r0, [r1, #0]
 80011b2:	0740      	lsls	r0, r0, #29
 80011b4:	d508      	bpl.n	80011c8 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80011b6:	6808      	ldr	r0, [r1, #0]
 80011b8:	f020 0004 	bic.w	r0, r0, #4
 80011bc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80011be:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80011c0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80011c2:	f042 0201 	orr.w	r2, r2, #1
 80011c6:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80011c8:	2201      	movs	r2, #1
 80011ca:	409a      	lsls	r2, r3
 80011cc:	4216      	tst	r6, r2
 80011ce:	d008      	beq.n	80011e2 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80011d0:	6821      	ldr	r1, [r4, #0]
 80011d2:	6949      	ldr	r1, [r1, #20]
 80011d4:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80011d6:	bf41      	itttt	mi
 80011d8:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80011da:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80011dc:	f042 0202 	orrmi.w	r2, r2, #2
 80011e0:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e2:	2204      	movs	r2, #4
 80011e4:	409a      	lsls	r2, r3
 80011e6:	4216      	tst	r6, r2
 80011e8:	d008      	beq.n	80011fc <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80011ea:	6821      	ldr	r1, [r4, #0]
 80011ec:	6809      	ldr	r1, [r1, #0]
 80011ee:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011f0:	bf41      	itttt	mi
 80011f2:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011f4:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80011f6:	f042 0204 	orrmi.w	r2, r2, #4
 80011fa:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011fc:	2210      	movs	r2, #16
 80011fe:	409a      	lsls	r2, r3
 8001200:	4216      	tst	r6, r2
 8001202:	d010      	beq.n	8001226 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	6819      	ldr	r1, [r3, #0]
 8001208:	0709      	lsls	r1, r1, #28
 800120a:	d50c      	bpl.n	8001226 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800120c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	0350      	lsls	r0, r2, #13
 8001212:	d535      	bpl.n	8001280 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0319      	lsls	r1, r3, #12
 8001218:	d401      	bmi.n	800121e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 800121a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800121c:	e000      	b.n	8001220 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800121e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001220:	b10b      	cbz	r3, 8001226 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001222:	4620      	mov	r0, r4
 8001224:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001226:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001228:	2220      	movs	r2, #32
 800122a:	408a      	lsls	r2, r1
 800122c:	4216      	tst	r6, r2
 800122e:	d038      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001230:	6823      	ldr	r3, [r4, #0]
 8001232:	6818      	ldr	r0, [r3, #0]
 8001234:	06c6      	lsls	r6, r0, #27
 8001236:	d534      	bpl.n	80012a2 <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001238:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800123a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800123e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001240:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001242:	d125      	bne.n	8001290 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001244:	f022 0216 	bic.w	r2, r2, #22
 8001248:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800124a:	695a      	ldr	r2, [r3, #20]
 800124c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001250:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001252:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001254:	b90a      	cbnz	r2, 800125a <HAL_DMA_IRQHandler+0xc6>
 8001256:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001258:	b11a      	cbz	r2, 8001262 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	f022 0208 	bic.w	r2, r2, #8
 8001260:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001262:	233f      	movs	r3, #63	; 0x3f
 8001264:	408b      	lsls	r3, r1
 8001266:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001268:	2300      	movs	r3, #0
 800126a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800126e:	2301      	movs	r3, #1
 8001270:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001274:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001276:	b10b      	cbz	r3, 800127c <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001278:	4620      	mov	r0, r4
 800127a:	4798      	blx	r3
}
 800127c:	b003      	add	sp, #12
 800127e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001284:	bf5e      	ittt	pl
 8001286:	681a      	ldrpl	r2, [r3, #0]
 8001288:	f022 0208 	bicpl.w	r2, r2, #8
 800128c:	601a      	strpl	r2, [r3, #0]
 800128e:	e7c4      	b.n	800121a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001290:	0350      	lsls	r0, r2, #13
 8001292:	d528      	bpl.n	80012e6 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	0319      	lsls	r1, r3, #12
 8001298:	d432      	bmi.n	8001300 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800129a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800129c:	b10b      	cbz	r3, 80012a2 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800129e:	4620      	mov	r0, r4
 80012a0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012a2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0e9      	beq.n	800127c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012a8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80012aa:	07da      	lsls	r2, r3, #31
 80012ac:	d519      	bpl.n	80012e2 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80012ae:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80012b0:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80012b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80012b6:	6813      	ldr	r3, [r2, #0]
 80012b8:	f023 0301 	bic.w	r3, r3, #1
 80012bc:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80012be:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80012c2:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80012c6:	9b01      	ldr	r3, [sp, #4]
 80012c8:	3301      	adds	r3, #1
 80012ca:	429f      	cmp	r7, r3
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	d302      	bcc.n	80012d6 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80012d0:	6813      	ldr	r3, [r2, #0]
 80012d2:	07db      	lsls	r3, r3, #31
 80012d4:	d4f7      	bmi.n	80012c6 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80012d6:	2300      	movs	r3, #0
 80012d8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80012dc:	2301      	movs	r3, #1
 80012de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80012e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80012e4:	e7c7      	b.n	8001276 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80012ec:	d108      	bne.n	8001300 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012ee:	6819      	ldr	r1, [r3, #0]
 80012f0:	f021 0110 	bic.w	r1, r1, #16
 80012f4:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80012f6:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80012f8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80012fc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001300:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001302:	e7cb      	b.n	800129c <HAL_DMA_IRQHandler+0x108>
 8001304:	20000000 	.word	0x20000000

08001308 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001308:	4b9c      	ldr	r3, [pc, #624]	; (800157c <HAL_GPIO_Init+0x274>)
 800130a:	4298      	cmp	r0, r3
{
 800130c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001310:	4604      	mov	r4, r0
 8001312:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001314:	d023      	beq.n	800135e <HAL_GPIO_Init+0x56>
 8001316:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800131a:	4298      	cmp	r0, r3
 800131c:	d01f      	beq.n	800135e <HAL_GPIO_Init+0x56>
 800131e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001322:	4298      	cmp	r0, r3
 8001324:	d01b      	beq.n	800135e <HAL_GPIO_Init+0x56>
 8001326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800132a:	4298      	cmp	r0, r3
 800132c:	d017      	beq.n	800135e <HAL_GPIO_Init+0x56>
 800132e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001332:	4298      	cmp	r0, r3
 8001334:	d013      	beq.n	800135e <HAL_GPIO_Init+0x56>
 8001336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800133a:	4298      	cmp	r0, r3
 800133c:	d00f      	beq.n	800135e <HAL_GPIO_Init+0x56>
 800133e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001342:	4298      	cmp	r0, r3
 8001344:	d00b      	beq.n	800135e <HAL_GPIO_Init+0x56>
 8001346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800134a:	4298      	cmp	r0, r3
 800134c:	d007      	beq.n	800135e <HAL_GPIO_Init+0x56>
 800134e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001352:	4298      	cmp	r0, r3
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x56>
 8001356:	21c3      	movs	r1, #195	; 0xc3
 8001358:	4889      	ldr	r0, [pc, #548]	; (8001580 <HAL_GPIO_Init+0x278>)
 800135a:	f7ff fa16 	bl	800078a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	b29a      	uxth	r2, r3
 8001362:	b112      	cbz	r2, 800136a <HAL_GPIO_Init+0x62>
 8001364:	0c1b      	lsrs	r3, r3, #16
 8001366:	041b      	lsls	r3, r3, #16
 8001368:	b11b      	cbz	r3, 8001372 <HAL_GPIO_Init+0x6a>
 800136a:	21c4      	movs	r1, #196	; 0xc4
 800136c:	4884      	ldr	r0, [pc, #528]	; (8001580 <HAL_GPIO_Init+0x278>)
 800136e:	f7ff fa0c 	bl	800078a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001372:	686b      	ldr	r3, [r5, #4]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d917      	bls.n	80013a8 <HAL_GPIO_Init+0xa0>
 8001378:	f1a3 0211 	sub.w	r2, r3, #17
 800137c:	2a01      	cmp	r2, #1
 800137e:	d913      	bls.n	80013a8 <HAL_GPIO_Init+0xa0>
 8001380:	4980      	ldr	r1, [pc, #512]	; (8001584 <HAL_GPIO_Init+0x27c>)
 8001382:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001386:	428a      	cmp	r2, r1
 8001388:	d00e      	beq.n	80013a8 <HAL_GPIO_Init+0xa0>
 800138a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800138e:	428b      	cmp	r3, r1
 8001390:	d00a      	beq.n	80013a8 <HAL_GPIO_Init+0xa0>
 8001392:	f5a1 2170 	sub.w	r1, r1, #983040	; 0xf0000
 8001396:	428a      	cmp	r2, r1
 8001398:	d006      	beq.n	80013a8 <HAL_GPIO_Init+0xa0>
 800139a:	4a7b      	ldr	r2, [pc, #492]	; (8001588 <HAL_GPIO_Init+0x280>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0xa0>
 80013a0:	21c5      	movs	r1, #197	; 0xc5
 80013a2:	4877      	ldr	r0, [pc, #476]	; (8001580 <HAL_GPIO_Init+0x278>)
 80013a4:	f7ff f9f1 	bl	800078a <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80013a8:	68ab      	ldr	r3, [r5, #8]
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d903      	bls.n	80013b6 <HAL_GPIO_Init+0xae>
 80013ae:	21c6      	movs	r1, #198	; 0xc6
 80013b0:	4873      	ldr	r0, [pc, #460]	; (8001580 <HAL_GPIO_Init+0x278>)
 80013b2:	f7ff f9ea 	bl	800078a <assert_failed>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013b6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8001590 <HAL_GPIO_Init+0x288>
{
 80013ba:	2600      	movs	r6, #0
    ioposition = 0x01U << position;
 80013bc:	2301      	movs	r3, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	682a      	ldr	r2, [r5, #0]
    ioposition = 0x01U << position;
 80013c0:	fa03 f706 	lsl.w	r7, r3, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c4:	ea07 0902 	and.w	r9, r7, r2
    if(iocurrent == ioposition)
 80013c8:	454f      	cmp	r7, r9
 80013ca:	f040 80c4 	bne.w	8001556 <HAL_GPIO_Init+0x24e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ce:	686a      	ldr	r2, [r5, #4]
 80013d0:	f022 0210 	bic.w	r2, r2, #16
 80013d4:	2a02      	cmp	r2, #2
 80013d6:	d118      	bne.n	800140a <HAL_GPIO_Init+0x102>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80013d8:	692a      	ldr	r2, [r5, #16]
 80013da:	2a0d      	cmp	r2, #13
 80013dc:	d905      	bls.n	80013ea <HAL_GPIO_Init+0xe2>
 80013de:	2a0f      	cmp	r2, #15
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0xe2>
 80013e2:	21d7      	movs	r1, #215	; 0xd7
 80013e4:	4866      	ldr	r0, [pc, #408]	; (8001580 <HAL_GPIO_Init+0x278>)
 80013e6:	f7ff f9d0 	bl	800078a <assert_failed>
        temp = GPIOx->AFR[position >> 3U];
 80013ea:	08f1      	lsrs	r1, r6, #3
 80013ec:	eb04 0181 	add.w	r1, r4, r1, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f0:	f006 0207 	and.w	r2, r6, #7
 80013f4:	0090      	lsls	r0, r2, #2
        temp = GPIOx->AFR[position >> 3U];
 80013f6:	6a0b      	ldr	r3, [r1, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013f8:	220f      	movs	r2, #15
 80013fa:	4082      	lsls	r2, r0
 80013fc:	ea23 0e02 	bic.w	lr, r3, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001400:	692a      	ldr	r2, [r5, #16]
 8001402:	4082      	lsls	r2, r0
 8001404:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001408:	620a      	str	r2, [r1, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800140a:	686a      	ldr	r2, [r5, #4]
      temp = GPIOx->MODER;
 800140c:	6820      	ldr	r0, [r4, #0]
 800140e:	ea4f 0b46 	mov.w	fp, r6, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001412:	f04f 0a03 	mov.w	sl, #3
 8001416:	fa0a fa0b 	lsl.w	sl, sl, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141a:	f002 0103 	and.w	r1, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141e:	ea6f 0a0a 	mvn.w	sl, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001422:	f022 0210 	bic.w	r2, r2, #16
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001426:	ea00 000a 	and.w	r0, r0, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142a:	fa01 f10b 	lsl.w	r1, r1, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800142e:	3a01      	subs	r2, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001430:	4301      	orrs	r1, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001432:	2a01      	cmp	r2, #1
      GPIOx->MODER = temp;
 8001434:	6021      	str	r1, [r4, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001436:	d817      	bhi.n	8001468 <HAL_GPIO_Init+0x160>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001438:	68ea      	ldr	r2, [r5, #12]
 800143a:	2a03      	cmp	r2, #3
 800143c:	d903      	bls.n	8001446 <HAL_GPIO_Init+0x13e>
 800143e:	21ea      	movs	r1, #234	; 0xea
 8001440:	484f      	ldr	r0, [pc, #316]	; (8001580 <HAL_GPIO_Init+0x278>)
 8001442:	f7ff f9a2 	bl	800078a <assert_failed>
        temp = GPIOx->OSPEEDR; 
 8001446:	68a1      	ldr	r1, [r4, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001448:	68ea      	ldr	r2, [r5, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800144a:	686b      	ldr	r3, [r5, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800144c:	ea0a 0101 	and.w	r1, sl, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001450:	fa02 f20b 	lsl.w	r2, r2, fp
 8001454:	430a      	orrs	r2, r1
        GPIOx->OSPEEDR = temp;
 8001456:	60a2      	str	r2, [r4, #8]
        temp = GPIOx->OTYPER;
 8001458:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800145a:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800145e:	ea22 0207 	bic.w	r2, r2, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001462:	40b3      	lsls	r3, r6
 8001464:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
 8001466:	6063      	str	r3, [r4, #4]
      temp = GPIOx->PUPDR;
 8001468:	68e3      	ldr	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146a:	6868      	ldr	r0, [r5, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800146c:	ea0a 0a03 	and.w	sl, sl, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	68ab      	ldr	r3, [r5, #8]
 8001472:	fa03 f30b 	lsl.w	r3, r3, fp
 8001476:	ea43 030a 	orr.w	r3, r3, sl
      GPIOx->PUPDR = temp;
 800147a:	60e3      	str	r3, [r4, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800147c:	00c3      	lsls	r3, r0, #3
 800147e:	d56a      	bpl.n	8001556 <HAL_GPIO_Init+0x24e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4a42      	ldr	r2, [pc, #264]	; (800158c <HAL_GPIO_Init+0x284>)
 8001482:	2300      	movs	r3, #0
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001488:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800148c:	6451      	str	r1, [r2, #68]	; 0x44
 800148e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001490:	f026 0103 	bic.w	r1, r6, #3
 8001494:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8001498:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800149c:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 80014a0:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a2:	f006 0e03 	and.w	lr, r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014a8:	f8d1 c008 	ldr.w	ip, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ac:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f20e 	lsl.w	r2, r2, lr
 80014b6:	ea2c 0c02 	bic.w	ip, ip, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ba:	4a30      	ldr	r2, [pc, #192]	; (800157c <HAL_GPIO_Init+0x274>)
 80014bc:	4294      	cmp	r4, r2
 80014be:	d01f      	beq.n	8001500 <HAL_GPIO_Init+0x1f8>
 80014c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014c4:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80014c8:	429c      	cmp	r4, r3
 80014ca:	d04b      	beq.n	8001564 <HAL_GPIO_Init+0x25c>
 80014cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014d0:	429c      	cmp	r4, r3
 80014d2:	d049      	beq.n	8001568 <HAL_GPIO_Init+0x260>
 80014d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014d8:	429c      	cmp	r4, r3
 80014da:	d047      	beq.n	800156c <HAL_GPIO_Init+0x264>
 80014dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014e0:	429c      	cmp	r4, r3
 80014e2:	d045      	beq.n	8001570 <HAL_GPIO_Init+0x268>
 80014e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014e8:	429c      	cmp	r4, r3
 80014ea:	d043      	beq.n	8001574 <HAL_GPIO_Init+0x26c>
 80014ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014f0:	429c      	cmp	r4, r3
 80014f2:	d041      	beq.n	8001578 <HAL_GPIO_Init+0x270>
 80014f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80014f8:	429c      	cmp	r4, r3
 80014fa:	bf14      	ite	ne
 80014fc:	2308      	movne	r3, #8
 80014fe:	2307      	moveq	r3, #7
 8001500:	fa03 f30e 	lsl.w	r3, r3, lr
 8001504:	ea43 030c 	orr.w	r3, r3, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001508:	608b      	str	r3, [r1, #8]
        temp = EXTI->IMR;
 800150a:	f8d8 2000 	ldr.w	r2, [r8]
        temp &= ~((uint32_t)iocurrent);
 800150e:	ea6f 0109 	mvn.w	r1, r9
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001512:	03c7      	lsls	r7, r0, #15
        temp &= ~((uint32_t)iocurrent);
 8001514:	bf54      	ite	pl
 8001516:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8001518:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->IMR = temp;
 800151c:	f8c8 2000 	str.w	r2, [r8]

        temp = EXTI->EMR;
 8001520:	f8d8 2004 	ldr.w	r2, [r8, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001524:	0383      	lsls	r3, r0, #14
        temp &= ~((uint32_t)iocurrent);
 8001526:	bf54      	ite	pl
 8001528:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800152a:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->EMR = temp;
 800152e:	f8c8 2004 	str.w	r2, [r8, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001532:	f8d8 2008 	ldr.w	r2, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001536:	02c7      	lsls	r7, r0, #11
        temp &= ~((uint32_t)iocurrent);
 8001538:	bf54      	ite	pl
 800153a:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800153c:	ea49 0202 	orrmi.w	r2, r9, r2
        }
        EXTI->RTSR = temp;
 8001540:	f8c8 2008 	str.w	r2, [r8, #8]

        temp = EXTI->FTSR;
 8001544:	f8d8 300c 	ldr.w	r3, [r8, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001548:	0282      	lsls	r2, r0, #10
        temp &= ~((uint32_t)iocurrent);
 800154a:	bf54      	ite	pl
 800154c:	400b      	andpl	r3, r1
        {
          temp |= iocurrent;
 800154e:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->FTSR = temp;
 8001552:	f8c8 300c 	str.w	r3, [r8, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001556:	3601      	adds	r6, #1
 8001558:	2e10      	cmp	r6, #16
 800155a:	f47f af2f 	bne.w	80013bc <HAL_GPIO_Init+0xb4>
      }
    }
  }
}
 800155e:	b003      	add	sp, #12
 8001560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001564:	2301      	movs	r3, #1
 8001566:	e7cb      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 8001568:	2302      	movs	r3, #2
 800156a:	e7c9      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 800156c:	2303      	movs	r3, #3
 800156e:	e7c7      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 8001570:	2304      	movs	r3, #4
 8001572:	e7c5      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 8001574:	2305      	movs	r3, #5
 8001576:	e7c3      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 8001578:	2306      	movs	r3, #6
 800157a:	e7c1      	b.n	8001500 <HAL_GPIO_Init+0x1f8>
 800157c:	40020000 	.word	0x40020000
 8001580:	080034af 	.word	0x080034af
 8001584:	10110000 	.word	0x10110000
 8001588:	10220000 	.word	0x10220000
 800158c:	40023800 	.word	0x40023800
 8001590:	40013c00 	.word	0x40013c00

08001594 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001594:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001596:	4604      	mov	r4, r0
 8001598:	2800      	cmp	r0, #0
 800159a:	f000 80c1 	beq.w	8001720 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800159e:	6803      	ldr	r3, [r0, #0]
 80015a0:	4a60      	ldr	r2, [pc, #384]	; (8001724 <HAL_I2C_Init+0x190>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00c      	beq.n	80015c0 <HAL_I2C_Init+0x2c>
 80015a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d008      	beq.n	80015c0 <HAL_I2C_Init+0x2c>
 80015ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d004      	beq.n	80015c0 <HAL_I2C_Init+0x2c>
 80015b6:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 80015ba:	485b      	ldr	r0, [pc, #364]	; (8001728 <HAL_I2C_Init+0x194>)
 80015bc:	f7ff f8e5 	bl	800078a <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 80015c0:	6863      	ldr	r3, [r4, #4]
 80015c2:	4a5a      	ldr	r2, [pc, #360]	; (800172c <HAL_I2C_Init+0x198>)
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d904      	bls.n	80015d4 <HAL_I2C_Init+0x40>
 80015ca:	f240 116f 	movw	r1, #367	; 0x16f
 80015ce:	4856      	ldr	r0, [pc, #344]	; (8001728 <HAL_I2C_Init+0x194>)
 80015d0:	f7ff f8db 	bl	800078a <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80015d4:	68a3      	ldr	r3, [r4, #8]
 80015d6:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 80015da:	d004      	beq.n	80015e6 <HAL_I2C_Init+0x52>
 80015dc:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80015e0:	4851      	ldr	r0, [pc, #324]	; (8001728 <HAL_I2C_Init+0x194>)
 80015e2:	f7ff f8d2 	bl	800078a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80015e6:	68e3      	ldr	r3, [r4, #12]
 80015e8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015ec:	f023 0303 	bic.w	r3, r3, #3
 80015f0:	b123      	cbz	r3, 80015fc <HAL_I2C_Init+0x68>
 80015f2:	f240 1171 	movw	r1, #369	; 0x171
 80015f6:	484c      	ldr	r0, [pc, #304]	; (8001728 <HAL_I2C_Init+0x194>)
 80015f8:	f7ff f8c7 	bl	800078a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80015fc:	6923      	ldr	r3, [r4, #16]
 80015fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001602:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001606:	d004      	beq.n	8001612 <HAL_I2C_Init+0x7e>
 8001608:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800160c:	4846      	ldr	r0, [pc, #280]	; (8001728 <HAL_I2C_Init+0x194>)
 800160e:	f7ff f8bc 	bl	800078a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001612:	6963      	ldr	r3, [r4, #20]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d904      	bls.n	8001622 <HAL_I2C_Init+0x8e>
 8001618:	f240 1173 	movw	r1, #371	; 0x173
 800161c:	4842      	ldr	r0, [pc, #264]	; (8001728 <HAL_I2C_Init+0x194>)
 800161e:	f7ff f8b4 	bl	800078a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001622:	69a3      	ldr	r3, [r4, #24]
 8001624:	f033 03fe 	bics.w	r3, r3, #254	; 0xfe
 8001628:	d004      	beq.n	8001634 <HAL_I2C_Init+0xa0>
 800162a:	f44f 71ba 	mov.w	r1, #372	; 0x174
 800162e:	483e      	ldr	r0, [pc, #248]	; (8001728 <HAL_I2C_Init+0x194>)
 8001630:	f7ff f8ab 	bl	800078a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001634:	69e3      	ldr	r3, [r4, #28]
 8001636:	f033 0340 	bics.w	r3, r3, #64	; 0x40
 800163a:	d004      	beq.n	8001646 <HAL_I2C_Init+0xb2>
 800163c:	f240 1175 	movw	r1, #373	; 0x175
 8001640:	4839      	ldr	r0, [pc, #228]	; (8001728 <HAL_I2C_Init+0x194>)
 8001642:	f7ff f8a2 	bl	800078a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001646:	6a23      	ldr	r3, [r4, #32]
 8001648:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800164c:	d004      	beq.n	8001658 <HAL_I2C_Init+0xc4>
 800164e:	f44f 71bb 	mov.w	r1, #374	; 0x176
 8001652:	4835      	ldr	r0, [pc, #212]	; (8001728 <HAL_I2C_Init+0x194>)
 8001654:	f7ff f899 	bl	800078a <assert_failed>

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8001658:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800165c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001660:	b923      	cbnz	r3, 800166c <HAL_I2C_Init+0xd8>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001662:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001666:	4620      	mov	r0, r4
 8001668:	f7fe ffe2 	bl	8000630 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800166c:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800166e:	4e30      	ldr	r6, [pc, #192]	; (8001730 <HAL_I2C_Init+0x19c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001670:	4d30      	ldr	r5, [pc, #192]	; (8001734 <HAL_I2C_Init+0x1a0>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001672:	2324      	movs	r3, #36	; 0x24
 8001674:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001678:	6813      	ldr	r3, [r2, #0]
 800167a:	f023 0301 	bic.w	r3, r3, #1
 800167e:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001680:	f000 fb7a 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001684:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8001686:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8001688:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800168c:	42b3      	cmp	r3, r6
 800168e:	bf84      	itt	hi
 8001690:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8001694:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8001696:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8001698:	bf91      	iteee	ls
 800169a:	1c69      	addls	r1, r5, #1
 800169c:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80016a0:	fbb1 f1f5 	udivhi	r1, r1, r5
 80016a4:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80016a6:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80016a8:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80016aa:	d821      	bhi.n	80016f0 <HAL_I2C_Init+0x15c>
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fbb0 f0f3 	udiv	r0, r0, r3
 80016b2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	bf98      	it	ls
 80016ba:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016bc:	6a21      	ldr	r1, [r4, #32]
 80016be:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80016c0:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016c2:	430b      	orrs	r3, r1
 80016c4:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80016c6:	68e1      	ldr	r1, [r4, #12]
 80016c8:	6923      	ldr	r3, [r4, #16]
 80016ca:	430b      	orrs	r3, r1
 80016cc:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80016ce:	69a1      	ldr	r1, [r4, #24]
 80016d0:	6963      	ldr	r3, [r4, #20]
 80016d2:	430b      	orrs	r3, r1
 80016d4:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d6:	6813      	ldr	r3, [r2, #0]
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016de:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80016e0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016e8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ea:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 80016ee:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80016f0:	68a1      	ldr	r1, [r4, #8]
 80016f2:	b949      	cbnz	r1, 8001708 <HAL_I2C_Init+0x174>
 80016f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80016f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80016fc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001700:	b163      	cbz	r3, 800171c <HAL_I2C_Init+0x188>
 8001702:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8001706:	e7d9      	b.n	80016bc <HAL_I2C_Init+0x128>
 8001708:	2119      	movs	r1, #25
 800170a:	434b      	muls	r3, r1
 800170c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001710:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8001714:	b113      	cbz	r3, 800171c <HAL_I2C_Init+0x188>
 8001716:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800171a:	e7cf      	b.n	80016bc <HAL_I2C_Init+0x128>
 800171c:	2001      	movs	r0, #1
 800171e:	e7cd      	b.n	80016bc <HAL_I2C_Init+0x128>
    return HAL_ERROR;
 8001720:	2001      	movs	r0, #1
}
 8001722:	bd70      	pop	{r4, r5, r6, pc}
 8001724:	40005400 	.word	0x40005400
 8001728:	080034e8 	.word	0x080034e8
 800172c:	00061a7f 	.word	0x00061a7f
 8001730:	000186a0 	.word	0x000186a0
 8001734:	000f4240 	.word	0x000f4240

08001738 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800173c:	4604      	mov	r4, r0
 800173e:	b918      	cbnz	r0, 8001748 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001740:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001742:	b002      	add	sp, #8
 8001744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001748:	6803      	ldr	r3, [r0, #0]
 800174a:	2b0f      	cmp	r3, #15
 800174c:	d903      	bls.n	8001756 <HAL_RCC_OscConfig+0x1e>
 800174e:	21f8      	movs	r1, #248	; 0xf8
 8001750:	48a2      	ldr	r0, [pc, #648]	; (80019dc <HAL_RCC_OscConfig+0x2a4>)
 8001752:	f7ff f81a 	bl	800078a <assert_failed>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	07d8      	lsls	r0, r3, #31
 800175a:	d418      	bmi.n	800178e <HAL_RCC_OscConfig+0x56>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175c:	6823      	ldr	r3, [r4, #0]
 800175e:	0799      	lsls	r1, r3, #30
 8001760:	d46b      	bmi.n	800183a <HAL_RCC_OscConfig+0x102>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	0719      	lsls	r1, r3, #28
 8001766:	f100 80be 	bmi.w	80018e6 <HAL_RCC_OscConfig+0x1ae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	075a      	lsls	r2, r3, #29
 800176e:	f100 80e4 	bmi.w	800193a <HAL_RCC_OscConfig+0x202>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001772:	69a3      	ldr	r3, [r4, #24]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d904      	bls.n	8001782 <HAL_RCC_OscConfig+0x4a>
 8001778:	f240 11df 	movw	r1, #479	; 0x1df
 800177c:	4897      	ldr	r0, [pc, #604]	; (80019dc <HAL_RCC_OscConfig+0x2a4>)
 800177e:	f7ff f804 	bl	800078a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001782:	69a2      	ldr	r2, [r4, #24]
 8001784:	2a00      	cmp	r2, #0
 8001786:	f040 8151 	bne.w	8001a2c <HAL_RCC_OscConfig+0x2f4>
  return HAL_OK;
 800178a:	2000      	movs	r0, #0
 800178c:	e7d9      	b.n	8001742 <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800178e:	6863      	ldr	r3, [r4, #4]
 8001790:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8001794:	d006      	beq.n	80017a4 <HAL_RCC_OscConfig+0x6c>
 8001796:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800179a:	d003      	beq.n	80017a4 <HAL_RCC_OscConfig+0x6c>
 800179c:	21fd      	movs	r1, #253	; 0xfd
 800179e:	488f      	ldr	r0, [pc, #572]	; (80019dc <HAL_RCC_OscConfig+0x2a4>)
 80017a0:	f7fe fff3 	bl	800078a <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017a4:	4b8e      	ldr	r3, [pc, #568]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	f002 020c 	and.w	r2, r2, #12
 80017ac:	2a04      	cmp	r2, #4
 80017ae:	d007      	beq.n	80017c0 <HAL_RCC_OscConfig+0x88>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017b6:	2a08      	cmp	r2, #8
 80017b8:	d10a      	bne.n	80017d0 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	025a      	lsls	r2, r3, #9
 80017be:	d507      	bpl.n	80017d0 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	4b87      	ldr	r3, [pc, #540]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	039b      	lsls	r3, r3, #14
 80017c6:	d5c9      	bpl.n	800175c <HAL_RCC_OscConfig+0x24>
 80017c8:	6863      	ldr	r3, [r4, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1c6      	bne.n	800175c <HAL_RCC_OscConfig+0x24>
 80017ce:	e7b7      	b.n	8001740 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017d0:	6863      	ldr	r3, [r4, #4]
 80017d2:	4d83      	ldr	r5, [pc, #524]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
 80017d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d8:	d111      	bne.n	80017fe <HAL_RCC_OscConfig+0xc6>
 80017da:	682b      	ldr	r3, [r5, #0]
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017e2:	f7ff faef 	bl	8000dc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4d7e      	ldr	r5, [pc, #504]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 80017e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	682b      	ldr	r3, [r5, #0]
 80017ec:	039f      	lsls	r7, r3, #14
 80017ee:	d4b5      	bmi.n	800175c <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fae8 	bl	8000dc4 <HAL_GetTick>
 80017f4:	1b80      	subs	r0, r0, r6
 80017f6:	2864      	cmp	r0, #100	; 0x64
 80017f8:	d9f7      	bls.n	80017ea <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 80017fa:	2003      	movs	r0, #3
 80017fc:	e7a1      	b.n	8001742 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001802:	d104      	bne.n	800180e <HAL_RCC_OscConfig+0xd6>
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180a:	602b      	str	r3, [r5, #0]
 800180c:	e7e5      	b.n	80017da <HAL_RCC_OscConfig+0xa2>
 800180e:	682a      	ldr	r2, [r5, #0]
 8001810:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001814:	602a      	str	r2, [r5, #0]
 8001816:	682a      	ldr	r2, [r5, #0]
 8001818:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800181c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1df      	bne.n	80017e2 <HAL_RCC_OscConfig+0xaa>
        tickstart = HAL_GetTick();
 8001822:	f7ff facf 	bl	8000dc4 <HAL_GetTick>
 8001826:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001828:	682b      	ldr	r3, [r5, #0]
 800182a:	0398      	lsls	r0, r3, #14
 800182c:	d596      	bpl.n	800175c <HAL_RCC_OscConfig+0x24>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182e:	f7ff fac9 	bl	8000dc4 <HAL_GetTick>
 8001832:	1b80      	subs	r0, r0, r6
 8001834:	2864      	cmp	r0, #100	; 0x64
 8001836:	d9f7      	bls.n	8001828 <HAL_RCC_OscConfig+0xf0>
 8001838:	e7df      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800183a:	68e3      	ldr	r3, [r4, #12]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d904      	bls.n	800184a <HAL_RCC_OscConfig+0x112>
 8001840:	f240 112f 	movw	r1, #303	; 0x12f
 8001844:	4865      	ldr	r0, [pc, #404]	; (80019dc <HAL_RCC_OscConfig+0x2a4>)
 8001846:	f7fe ffa0 	bl	800078a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800184a:	6923      	ldr	r3, [r4, #16]
 800184c:	2b1f      	cmp	r3, #31
 800184e:	d904      	bls.n	800185a <HAL_RCC_OscConfig+0x122>
 8001850:	f44f 7198 	mov.w	r1, #304	; 0x130
 8001854:	4861      	ldr	r0, [pc, #388]	; (80019dc <HAL_RCC_OscConfig+0x2a4>)
 8001856:	f7fe ff98 	bl	800078a <assert_failed>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185a:	4b61      	ldr	r3, [pc, #388]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	f012 0f0c 	tst.w	r2, #12
 8001862:	d007      	beq.n	8001874 <HAL_RCC_OscConfig+0x13c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800186a:	2a08      	cmp	r2, #8
 800186c:	d112      	bne.n	8001894 <HAL_RCC_OscConfig+0x15c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	0259      	lsls	r1, r3, #9
 8001872:	d40f      	bmi.n	8001894 <HAL_RCC_OscConfig+0x15c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001874:	4b5a      	ldr	r3, [pc, #360]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	0792      	lsls	r2, r2, #30
 800187a:	d503      	bpl.n	8001884 <HAL_RCC_OscConfig+0x14c>
 800187c:	68e2      	ldr	r2, [r4, #12]
 800187e:	2a01      	cmp	r2, #1
 8001880:	f47f af5e 	bne.w	8001740 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	6921      	ldr	r1, [r4, #16]
 8001888:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800188c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001890:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001892:	e766      	b.n	8001762 <HAL_RCC_OscConfig+0x2a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001894:	68e2      	ldr	r2, [r4, #12]
 8001896:	4b53      	ldr	r3, [pc, #332]	; (80019e4 <HAL_RCC_OscConfig+0x2ac>)
 8001898:	b1b2      	cbz	r2, 80018c8 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800189e:	f7ff fa91 	bl	8000dc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4d4f      	ldr	r5, [pc, #316]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 80018a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	682b      	ldr	r3, [r5, #0]
 80018a8:	079f      	lsls	r7, r3, #30
 80018aa:	d507      	bpl.n	80018bc <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ac:	682b      	ldr	r3, [r5, #0]
 80018ae:	6922      	ldr	r2, [r4, #16]
 80018b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018b4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018b8:	602b      	str	r3, [r5, #0]
 80018ba:	e752      	b.n	8001762 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff fa82 	bl	8000dc4 <HAL_GetTick>
 80018c0:	1b80      	subs	r0, r0, r6
 80018c2:	2802      	cmp	r0, #2
 80018c4:	d9ef      	bls.n	80018a6 <HAL_RCC_OscConfig+0x16e>
 80018c6:	e798      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 80018c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018ca:	f7ff fa7b 	bl	8000dc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	4d44      	ldr	r5, [pc, #272]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
        tickstart = HAL_GetTick();
 80018d0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	682b      	ldr	r3, [r5, #0]
 80018d4:	0798      	lsls	r0, r3, #30
 80018d6:	f57f af44 	bpl.w	8001762 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018da:	f7ff fa73 	bl	8000dc4 <HAL_GetTick>
 80018de:	1b80      	subs	r0, r0, r6
 80018e0:	2802      	cmp	r0, #2
 80018e2:	d9f6      	bls.n	80018d2 <HAL_RCC_OscConfig+0x19a>
 80018e4:	e789      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80018e6:	6963      	ldr	r3, [r4, #20]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d904      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1be>
 80018ec:	f44f 71b8 	mov.w	r1, #368	; 0x170
 80018f0:	483a      	ldr	r0, [pc, #232]	; (80019dc <HAL_RCC_OscConfig+0x2a4>)
 80018f2:	f7fe ff4a 	bl	800078a <assert_failed>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018f6:	6962      	ldr	r2, [r4, #20]
 80018f8:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_RCC_OscConfig+0x2b0>)
 80018fa:	b17a      	cbz	r2, 800191c <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_LSI_ENABLE();
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001900:	f7ff fa60 	bl	8000dc4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001904:	4d36      	ldr	r5, [pc, #216]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8001906:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001908:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800190a:	079b      	lsls	r3, r3, #30
 800190c:	f53f af2d 	bmi.w	800176a <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fa58 	bl	8000dc4 <HAL_GetTick>
 8001914:	1b80      	subs	r0, r0, r6
 8001916:	2802      	cmp	r0, #2
 8001918:	d9f6      	bls.n	8001908 <HAL_RCC_OscConfig+0x1d0>
 800191a:	e76e      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 800191c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800191e:	f7ff fa51 	bl	8000dc4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001922:	4d2f      	ldr	r5, [pc, #188]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 8001924:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001926:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001928:	079f      	lsls	r7, r3, #30
 800192a:	f57f af1e 	bpl.w	800176a <HAL_RCC_OscConfig+0x32>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800192e:	f7ff fa49 	bl	8000dc4 <HAL_GetTick>
 8001932:	1b80      	subs	r0, r0, r6
 8001934:	2802      	cmp	r0, #2
 8001936:	d9f6      	bls.n	8001926 <HAL_RCC_OscConfig+0x1ee>
 8001938:	e75f      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800193a:	68a3      	ldr	r3, [r4, #8]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d906      	bls.n	800194e <HAL_RCC_OscConfig+0x216>
 8001940:	2b05      	cmp	r3, #5
 8001942:	d004      	beq.n	800194e <HAL_RCC_OscConfig+0x216>
 8001944:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8001948:	4824      	ldr	r0, [pc, #144]	; (80019dc <HAL_RCC_OscConfig+0x2a4>)
 800194a:	f7fe ff1e 	bl	800078a <assert_failed>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
 8001950:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001952:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001956:	d128      	bne.n	80019aa <HAL_RCC_OscConfig+0x272>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800196c:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800196e:	4d1f      	ldr	r5, [pc, #124]	; (80019ec <HAL_RCC_OscConfig+0x2b4>)
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	05d8      	lsls	r0, r3, #23
 8001974:	d51b      	bpl.n	80019ae <HAL_RCC_OscConfig+0x276>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001976:	68a3      	ldr	r3, [r4, #8]
 8001978:	4d19      	ldr	r5, [pc, #100]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
 800197a:	2b01      	cmp	r3, #1
 800197c:	d127      	bne.n	80019ce <HAL_RCC_OscConfig+0x296>
 800197e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001986:	f7ff fa1d 	bl	8000dc4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198a:	4d15      	ldr	r5, [pc, #84]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
      tickstart = HAL_GetTick();
 800198c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001992:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001994:	079a      	lsls	r2, r3, #30
 8001996:	d543      	bpl.n	8001a20 <HAL_RCC_OscConfig+0x2e8>
    if(pwrclkchanged == SET)
 8001998:	2e00      	cmp	r6, #0
 800199a:	f43f aeea 	beq.w	8001772 <HAL_RCC_OscConfig+0x3a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <HAL_RCC_OscConfig+0x2a8>)
 80019a0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a6:	6413      	str	r3, [r2, #64]	; 0x40
 80019a8:	e6e3      	b.n	8001772 <HAL_RCC_OscConfig+0x3a>
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	2600      	movs	r6, #0
 80019ac:	e7df      	b.n	800196e <HAL_RCC_OscConfig+0x236>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019b6:	f7ff fa05 	bl	8000dc4 <HAL_GetTick>
 80019ba:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	682b      	ldr	r3, [r5, #0]
 80019be:	05d9      	lsls	r1, r3, #23
 80019c0:	d4d9      	bmi.n	8001976 <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c2:	f7ff f9ff 	bl	8000dc4 <HAL_GetTick>
 80019c6:	1bc0      	subs	r0, r0, r7
 80019c8:	2802      	cmp	r0, #2
 80019ca:	d9f7      	bls.n	80019bc <HAL_RCC_OscConfig+0x284>
 80019cc:	e715      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d10e      	bne.n	80019f0 <HAL_RCC_OscConfig+0x2b8>
 80019d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	672b      	str	r3, [r5, #112]	; 0x70
 80019da:	e7d0      	b.n	800197e <HAL_RCC_OscConfig+0x246>
 80019dc:	08003520 	.word	0x08003520
 80019e0:	40023800 	.word	0x40023800
 80019e4:	42470000 	.word	0x42470000
 80019e8:	42470e80 	.word	0x42470e80
 80019ec:	40007000 	.word	0x40007000
 80019f0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	672a      	str	r2, [r5, #112]	; 0x70
 80019f8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019fa:	f022 0204 	bic.w	r2, r2, #4
 80019fe:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1c0      	bne.n	8001986 <HAL_RCC_OscConfig+0x24e>
      tickstart = HAL_GetTick();
 8001a04:	f7ff f9de 	bl	8000dc4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a08:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a0c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a10:	079b      	lsls	r3, r3, #30
 8001a12:	d5c1      	bpl.n	8001998 <HAL_RCC_OscConfig+0x260>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a14:	f7ff f9d6 	bl	8000dc4 <HAL_GetTick>
 8001a18:	1bc0      	subs	r0, r0, r7
 8001a1a:	4540      	cmp	r0, r8
 8001a1c:	d9f7      	bls.n	8001a0e <HAL_RCC_OscConfig+0x2d6>
 8001a1e:	e6ec      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff f9d0 	bl	8000dc4 <HAL_GetTick>
 8001a24:	1bc0      	subs	r0, r0, r7
 8001a26:	4540      	cmp	r0, r8
 8001a28:	d9b3      	bls.n	8001992 <HAL_RCC_OscConfig+0x25a>
 8001a2a:	e6e6      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2c:	4e3b      	ldr	r6, [pc, #236]	; (8001b1c <HAL_RCC_OscConfig+0x3e4>)
 8001a2e:	68b3      	ldr	r3, [r6, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	f43f ae83 	beq.w	8001740 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3a:	2a02      	cmp	r2, #2
 8001a3c:	4d38      	ldr	r5, [pc, #224]	; (8001b20 <HAL_RCC_OscConfig+0x3e8>)
 8001a3e:	d15e      	bne.n	8001afe <HAL_RCC_OscConfig+0x3c6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001a40:	69e3      	ldr	r3, [r4, #28]
 8001a42:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001a46:	d004      	beq.n	8001a52 <HAL_RCC_OscConfig+0x31a>
 8001a48:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8001a4c:	4835      	ldr	r0, [pc, #212]	; (8001b24 <HAL_RCC_OscConfig+0x3ec>)
 8001a4e:	f7fe fe9c 	bl	800078a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001a52:	6a23      	ldr	r3, [r4, #32]
 8001a54:	2b3f      	cmp	r3, #63	; 0x3f
 8001a56:	d904      	bls.n	8001a62 <HAL_RCC_OscConfig+0x32a>
 8001a58:	f240 11e9 	movw	r1, #489	; 0x1e9
 8001a5c:	4831      	ldr	r0, [pc, #196]	; (8001b24 <HAL_RCC_OscConfig+0x3ec>)
 8001a5e:	f7fe fe94 	bl	800078a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a64:	3b32      	subs	r3, #50	; 0x32
 8001a66:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8001a6a:	d904      	bls.n	8001a76 <HAL_RCC_OscConfig+0x33e>
 8001a6c:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
 8001a70:	482c      	ldr	r0, [pc, #176]	; (8001b24 <HAL_RCC_OscConfig+0x3ec>)
 8001a72:	f7fe fe8a 	bl	800078a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001a76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a78:	2a08      	cmp	r2, #8
 8001a7a:	d804      	bhi.n	8001a86 <HAL_RCC_OscConfig+0x34e>
 8001a7c:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001a80:	40d3      	lsrs	r3, r2
 8001a82:	07d8      	lsls	r0, r3, #31
 8001a84:	d404      	bmi.n	8001a90 <HAL_RCC_OscConfig+0x358>
 8001a86:	f240 11eb 	movw	r1, #491	; 0x1eb
 8001a8a:	4826      	ldr	r0, [pc, #152]	; (8001b24 <HAL_RCC_OscConfig+0x3ec>)
 8001a8c:	f7fe fe7d 	bl	800078a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001a90:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a92:	3b02      	subs	r3, #2
 8001a94:	2b0d      	cmp	r3, #13
 8001a96:	d904      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x36a>
 8001a98:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8001a9c:	4821      	ldr	r0, [pc, #132]	; (8001b24 <HAL_RCC_OscConfig+0x3ec>)
 8001a9e:	f7fe fe74 	bl	800078a <assert_failed>
        __HAL_RCC_PLL_DISABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f98d 	bl	8000dc4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	4e1c      	ldr	r6, [pc, #112]	; (8001b1c <HAL_RCC_OscConfig+0x3e4>)
        tickstart = HAL_GetTick();
 8001aac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aae:	6833      	ldr	r3, [r6, #0]
 8001ab0:	0199      	lsls	r1, r3, #6
 8001ab2:	d41e      	bmi.n	8001af2 <HAL_RCC_OscConfig+0x3ba>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ab4:	6a22      	ldr	r2, [r4, #32]
 8001ab6:	69e3      	ldr	r3, [r4, #28]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001abc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ac0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001ac2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001ac6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac8:	4c14      	ldr	r4, [pc, #80]	; (8001b1c <HAL_RCC_OscConfig+0x3e4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aca:	0852      	lsrs	r2, r2, #1
 8001acc:	3a01      	subs	r2, #1
 8001ace:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001ad2:	6073      	str	r3, [r6, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f974 	bl	8000dc4 <HAL_GetTick>
 8001adc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	019a      	lsls	r2, r3, #6
 8001ae2:	f53f ae52 	bmi.w	800178a <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae6:	f7ff f96d 	bl	8000dc4 <HAL_GetTick>
 8001aea:	1b40      	subs	r0, r0, r5
 8001aec:	2802      	cmp	r0, #2
 8001aee:	d9f6      	bls.n	8001ade <HAL_RCC_OscConfig+0x3a6>
 8001af0:	e683      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af2:	f7ff f967 	bl	8000dc4 <HAL_GetTick>
 8001af6:	1bc0      	subs	r0, r0, r7
 8001af8:	2802      	cmp	r0, #2
 8001afa:	d9d8      	bls.n	8001aae <HAL_RCC_OscConfig+0x376>
 8001afc:	e67d      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_PLL_DISABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b02:	f7ff f95f 	bl	8000dc4 <HAL_GetTick>
 8001b06:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b08:	6833      	ldr	r3, [r6, #0]
 8001b0a:	019b      	lsls	r3, r3, #6
 8001b0c:	f57f ae3d 	bpl.w	800178a <HAL_RCC_OscConfig+0x52>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b10:	f7ff f958 	bl	8000dc4 <HAL_GetTick>
 8001b14:	1b00      	subs	r0, r0, r4
 8001b16:	2802      	cmp	r0, #2
 8001b18:	d9f6      	bls.n	8001b08 <HAL_RCC_OscConfig+0x3d0>
 8001b1a:	e66e      	b.n	80017fa <HAL_RCC_OscConfig+0xc2>
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	42470060 	.word	0x42470060
 8001b24:	08003520 	.word	0x08003520

08001b28 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b28:	4913      	ldr	r1, [pc, #76]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001b2a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b2c:	688b      	ldr	r3, [r1, #8]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b04      	cmp	r3, #4
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x16>
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d003      	beq.n	8001b42 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b3a:	4810      	ldr	r0, [pc, #64]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b3c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001b3e:	4810      	ldr	r0, [pc, #64]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b40:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b42:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b44:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b48:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4c:	bf14      	ite	ne
 8001b4e:	480c      	ldrne	r0, [pc, #48]	; (8001b80 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b50:	480a      	ldreq	r0, [pc, #40]	; (8001b7c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b52:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b56:	bf18      	it	ne
 8001b58:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b5e:	fba1 0100 	umull	r0, r1, r1, r0
 8001b62:	f7fe fb35 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b6e:	3301      	adds	r3, #1
 8001b70:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b72:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b76:	bd08      	pop	{r3, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	007a1200 	.word	0x007a1200

08001b84 <HAL_RCC_ClockConfig>:
{
 8001b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b88:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	b910      	cbnz	r0, 8001b94 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b8e:	2001      	movs	r0, #1
 8001b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001b94:	6803      	ldr	r3, [r0, #0]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	2b0e      	cmp	r3, #14
 8001b9a:	d904      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x22>
 8001b9c:	f44f 7114 	mov.w	r1, #592	; 0x250
 8001ba0:	486d      	ldr	r0, [pc, #436]	; (8001d58 <HAL_RCC_ClockConfig+0x1d4>)
 8001ba2:	f7fe fdf2 	bl	800078a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001ba6:	2d07      	cmp	r5, #7
 8001ba8:	d904      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x30>
 8001baa:	f240 2151 	movw	r1, #593	; 0x251
 8001bae:	486a      	ldr	r0, [pc, #424]	; (8001d58 <HAL_RCC_ClockConfig+0x1d4>)
 8001bb0:	f7fe fdeb 	bl	800078a <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b69      	ldr	r3, [pc, #420]	; (8001d5c <HAL_RCC_ClockConfig+0x1d8>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	f002 020f 	and.w	r2, r2, #15
 8001bbc:	4295      	cmp	r5, r2
 8001bbe:	d83d      	bhi.n	8001c3c <HAL_RCC_ClockConfig+0xb8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc0:	6822      	ldr	r2, [r4, #0]
 8001bc2:	0796      	lsls	r6, r2, #30
 8001bc4:	d442      	bmi.n	8001c4c <HAL_RCC_ClockConfig+0xc8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc6:	6823      	ldr	r3, [r4, #0]
 8001bc8:	07d9      	lsls	r1, r3, #31
 8001bca:	d46c      	bmi.n	8001ca6 <HAL_RCC_ClockConfig+0x122>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b63      	ldr	r3, [pc, #396]	; (8001d5c <HAL_RCC_ClockConfig+0x1d8>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f002 020f 	and.w	r2, r2, #15
 8001bd4:	4295      	cmp	r5, r2
 8001bd6:	f0c0 809c 	bcc.w	8001d12 <HAL_RCC_ClockConfig+0x18e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bda:	6823      	ldr	r3, [r4, #0]
 8001bdc:	075a      	lsls	r2, r3, #29
 8001bde:	f100 80a1 	bmi.w	8001d24 <HAL_RCC_ClockConfig+0x1a0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	071b      	lsls	r3, r3, #28
 8001be6:	d518      	bpl.n	8001c1a <HAL_RCC_ClockConfig+0x96>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001be8:	6923      	ldr	r3, [r4, #16]
 8001bea:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8001bee:	d00c      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x86>
 8001bf0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001bf4:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001bf8:	d007      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x86>
 8001bfa:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001bfe:	d004      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x86>
 8001c00:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001c04:	4854      	ldr	r0, [pc, #336]	; (8001d58 <HAL_RCC_ClockConfig+0x1d4>)
 8001c06:	f7fe fdc0 	bl	800078a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c0a:	4a55      	ldr	r2, [pc, #340]	; (8001d60 <HAL_RCC_ClockConfig+0x1dc>)
 8001c0c:	6921      	ldr	r1, [r4, #16]
 8001c0e:	6893      	ldr	r3, [r2, #8]
 8001c10:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c18:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c1a:	f7ff ff85 	bl	8001b28 <HAL_RCC_GetSysClockFreq>
 8001c1e:	4b50      	ldr	r3, [pc, #320]	; (8001d60 <HAL_RCC_ClockConfig+0x1dc>)
 8001c20:	4a50      	ldr	r2, [pc, #320]	; (8001d64 <HAL_RCC_ClockConfig+0x1e0>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c28:	5cd3      	ldrb	r3, [r2, r3]
 8001c2a:	40d8      	lsrs	r0, r3
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_RCC_ClockConfig+0x1e4>)
 8001c2e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c30:	200f      	movs	r0, #15
 8001c32:	f7ff f87d 	bl	8000d30 <HAL_InitTick>
  return HAL_OK;
 8001c36:	2000      	movs	r0, #0
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3c:	b2ea      	uxtb	r2, r5
 8001c3e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	429d      	cmp	r5, r3
 8001c48:	d1a1      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xa>
 8001c4a:	e7b9      	b.n	8001bc0 <HAL_RCC_ClockConfig+0x3c>
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <HAL_RCC_ClockConfig+0x1dc>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4e:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c52:	bf1e      	ittt	ne
 8001c54:	6899      	ldrne	r1, [r3, #8]
 8001c56:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001c5a:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c5c:	0710      	lsls	r0, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c5e:	bf42      	ittt	mi
 8001c60:	689a      	ldrmi	r2, [r3, #8]
 8001c62:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001c66:	609a      	strmi	r2, [r3, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001c68:	68a3      	ldr	r3, [r4, #8]
 8001c6a:	f033 0280 	bics.w	r2, r3, #128	; 0x80
 8001c6e:	d012      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x112>
 8001c70:	f023 0220 	bic.w	r2, r3, #32
 8001c74:	2a90      	cmp	r2, #144	; 0x90
 8001c76:	d00e      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x112>
 8001c78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001c7c:	2aa0      	cmp	r2, #160	; 0xa0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x112>
 8001c80:	f023 0210 	bic.w	r2, r3, #16
 8001c84:	2ac0      	cmp	r2, #192	; 0xc0
 8001c86:	d006      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x112>
 8001c88:	2bf0      	cmp	r3, #240	; 0xf0
 8001c8a:	d004      	beq.n	8001c96 <HAL_RCC_ClockConfig+0x112>
 8001c8c:	f44f 711d 	mov.w	r1, #628	; 0x274
 8001c90:	4831      	ldr	r0, [pc, #196]	; (8001d58 <HAL_RCC_ClockConfig+0x1d4>)
 8001c92:	f7fe fd7a 	bl	800078a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c96:	4a32      	ldr	r2, [pc, #200]	; (8001d60 <HAL_RCC_ClockConfig+0x1dc>)
 8001c98:	68a1      	ldr	r1, [r4, #8]
 8001c9a:	6893      	ldr	r3, [r2, #8]
 8001c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6093      	str	r3, [r2, #8]
 8001ca4:	e78f      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x42>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001ca6:	6863      	ldr	r3, [r4, #4]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d904      	bls.n	8001cb6 <HAL_RCC_ClockConfig+0x132>
 8001cac:	f240 217b 	movw	r1, #635	; 0x27b
 8001cb0:	4829      	ldr	r0, [pc, #164]	; (8001d58 <HAL_RCC_ClockConfig+0x1d4>)
 8001cb2:	f7fe fd6a 	bl	800078a <assert_failed>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb6:	6862      	ldr	r2, [r4, #4]
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_ClockConfig+0x1dc>)
 8001cba:	2a01      	cmp	r2, #1
 8001cbc:	d11f      	bne.n	8001cfe <HAL_RCC_ClockConfig+0x17a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc4:	f43f af63 	beq.w	8001b8e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc8:	4e25      	ldr	r6, [pc, #148]	; (8001d60 <HAL_RCC_ClockConfig+0x1dc>)
 8001cca:	68b3      	ldr	r3, [r6, #8]
 8001ccc:	f023 0303 	bic.w	r3, r3, #3
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001cd4:	f7ff f876 	bl	8000dc4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001cdc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	68b3      	ldr	r3, [r6, #8]
 8001ce0:	6862      	ldr	r2, [r4, #4]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001cea:	f43f af6f 	beq.w	8001bcc <HAL_RCC_ClockConfig+0x48>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cee:	f7ff f869 	bl	8000dc4 <HAL_GetTick>
 8001cf2:	1bc0      	subs	r0, r0, r7
 8001cf4:	4540      	cmp	r0, r8
 8001cf6:	d9f2      	bls.n	8001cde <HAL_RCC_ClockConfig+0x15a>
        return HAL_TIMEOUT;
 8001cf8:	2003      	movs	r0, #3
}
 8001cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cfe:	1e91      	subs	r1, r2, #2
 8001d00:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d02:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d04:	d802      	bhi.n	8001d0c <HAL_RCC_ClockConfig+0x188>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d06:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001d0a:	e7db      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x140>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0c:	f013 0f02 	tst.w	r3, #2
 8001d10:	e7d8      	b.n	8001cc4 <HAL_RCC_ClockConfig+0x140>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	b2ea      	uxtb	r2, r5
 8001d14:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	429d      	cmp	r5, r3
 8001d1e:	f47f af36 	bne.w	8001b8e <HAL_RCC_ClockConfig+0xa>
 8001d22:	e75a      	b.n	8001bda <HAL_RCC_ClockConfig+0x56>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001d24:	68e3      	ldr	r3, [r4, #12]
 8001d26:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8001d2a:	d00c      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x1c2>
 8001d2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001d30:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001d34:	d007      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x1c2>
 8001d36:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001d3a:	d004      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x1c2>
 8001d3c:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001d40:	4805      	ldr	r0, [pc, #20]	; (8001d58 <HAL_RCC_ClockConfig+0x1d4>)
 8001d42:	f7fe fd22 	bl	800078a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d46:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <HAL_RCC_ClockConfig+0x1dc>)
 8001d48:	68e1      	ldr	r1, [r4, #12]
 8001d4a:	6893      	ldr	r3, [r2, #8]
 8001d4c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d50:	430b      	orrs	r3, r1
 8001d52:	6093      	str	r3, [r2, #8]
 8001d54:	e745      	b.n	8001be2 <HAL_RCC_ClockConfig+0x5e>
 8001d56:	bf00      	nop
 8001d58:	08003520 	.word	0x08003520
 8001d5c:	40023c00 	.word	0x40023c00
 8001d60:	40023800 	.word	0x40023800
 8001d64:	080033f6 	.word	0x080033f6
 8001d68:	20000000 	.word	0x20000000

08001d6c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d6c:	4b01      	ldr	r3, [pc, #4]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x8>)
 8001d6e:	6818      	ldr	r0, [r3, #0]
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	20000000 	.word	0x20000000

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001d86:	6810      	ldr	r0, [r2, #0]
}
 8001d88:	40d8      	lsrs	r0, r3
 8001d8a:	4770      	bx	lr
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	08003406 	.word	0x08003406
 8001d94:	20000000 	.word	0x20000000

08001d98 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d98:	4b04      	ldr	r3, [pc, #16]	; (8001dac <HAL_RCC_GetPCLK2Freq+0x14>)
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	4a03      	ldr	r2, [pc, #12]	; (8001db4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001da6:	6810      	ldr	r0, [r2, #0]
}
 8001da8:	40d8      	lsrs	r0, r3
 8001daa:	4770      	bx	lr
 8001dac:	40023800 	.word	0x40023800
 8001db0:	08003406 	.word	0x08003406
 8001db4:	20000000 	.word	0x20000000

08001db8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001db8:	6a03      	ldr	r3, [r0, #32]
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dc0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001dc2:	6842      	ldr	r2, [r0, #4]
{
 8001dc4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001dc6:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001dc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001dca:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001dce:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001dd0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001dd2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001dd6:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001dd8:	4c0c      	ldr	r4, [pc, #48]	; (8001e0c <TIM_OC1_SetConfig+0x54>)
 8001dda:	42a0      	cmp	r0, r4
 8001ddc:	d009      	beq.n	8001df2 <TIM_OC1_SetConfig+0x3a>
 8001dde:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001de2:	42a0      	cmp	r0, r4
 8001de4:	d005      	beq.n	8001df2 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001de6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001de8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001dea:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001dec:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001dee:	6203      	str	r3, [r0, #32]
} 
 8001df0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001df2:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001df4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001df6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001dfa:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001dfc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001dfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e02:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001e04:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001e08:	4322      	orrs	r2, r4
 8001e0a:	e7ec      	b.n	8001de6 <TIM_OC1_SetConfig+0x2e>
 8001e0c:	40010000 	.word	0x40010000

08001e10 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e10:	6a03      	ldr	r3, [r0, #32]
 8001e12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 8001e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e1a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e1c:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001e1e:	f8d0 8004 	ldr.w	r8, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e22:	69c6      	ldr	r6, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e24:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001e26:	f026 0673 	bic.w	r6, r6, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001e2a:	431e      	orrs	r6, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e2c:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001e2e:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001e32:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <TIM_OC3_SetConfig+0x9c>)
 8001e38:	4298      	cmp	r0, r3
{
 8001e3a:	4605      	mov	r5, r0
 8001e3c:	460f      	mov	r7, r1
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001e3e:	d003      	beq.n	8001e48 <TIM_OC3_SetConfig+0x38>
 8001e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e44:	4298      	cmp	r0, r3
 8001e46:	d128      	bne.n	8001e9a <TIM_OC3_SetConfig+0x8a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f033 0308 	bics.w	r3, r3, #8
 8001e4e:	d004      	beq.n	8001e5a <TIM_OC3_SetConfig+0x4a>
 8001e50:	f241 3117 	movw	r1, #4887	; 0x1317
 8001e54:	4816      	ldr	r0, [pc, #88]	; (8001eb0 <TIM_OC3_SetConfig+0xa0>)
 8001e56:	f7fe fc98 	bl	800078a <assert_failed>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8001e60:	d004      	beq.n	8001e6c <TIM_OC3_SetConfig+0x5c>
 8001e62:	f241 3118 	movw	r1, #4888	; 0x1318
 8001e66:	4812      	ldr	r0, [pc, #72]	; (8001eb0 <TIM_OC3_SetConfig+0xa0>)
 8001e68:	f7fe fc8f 	bl	800078a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8001e72:	d004      	beq.n	8001e7e <TIM_OC3_SetConfig+0x6e>
 8001e74:	f241 3119 	movw	r1, #4889	; 0x1319
 8001e78:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <TIM_OC3_SetConfig+0xa0>)
 8001e7a:	f7fe fc86 	bl	800078a <assert_failed>
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e80:	69ba      	ldr	r2, [r7, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001e82:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001e86:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001e8a:	697b      	ldr	r3, [r7, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001e8c:	f428 5840 	bic.w	r8, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e90:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC3NE;
 8001e92:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001e96:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001e9a:	687b      	ldr	r3, [r7, #4]
  TIMx->CR2 = tmpcr2;
 8001e9c:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001ea0:	61ee      	str	r6, [r5, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001ea2:	63eb      	str	r3, [r5, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ea4:	622c      	str	r4, [r5, #32]
}
 8001ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000
 8001eb0:	08003558 	.word	0x08003558

08001eb4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eb4:	6a03      	ldr	r3, [r0, #32]
 8001eb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 8001eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001ebe:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ec0:	6a07      	ldr	r7, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001ec2:	6845      	ldr	r5, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ec4:	69c6      	ldr	r6, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ec6:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001ec8:	f426 46e6 	bic.w	r6, r6, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001ecc:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ed0:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001ed2:	f427 5700 	bic.w	r7, r7, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001ed6:	ea47 3703 	orr.w	r7, r7, r3, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <TIM_OC4_SetConfig+0x68>)
 8001edc:	4298      	cmp	r0, r3
{
 8001ede:	4604      	mov	r4, r0
 8001ee0:	4688      	mov	r8, r1
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001ee2:	d003      	beq.n	8001eec <TIM_OC4_SetConfig+0x38>
 8001ee4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee8:	4298      	cmp	r0, r3
 8001eea:	d10f      	bne.n	8001f0c <TIM_OC4_SetConfig+0x58>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8001eec:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001ef0:	f433 7380 	bics.w	r3, r3, #256	; 0x100
 8001ef4:	d004      	beq.n	8001f00 <TIM_OC4_SetConfig+0x4c>
 8001ef6:	f241 315d 	movw	r1, #4957	; 0x135d
 8001efa:	4809      	ldr	r0, [pc, #36]	; (8001f20 <TIM_OC4_SetConfig+0x6c>)
 8001efc:	f7fe fc45 	bl	800078a <assert_failed>
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f00:	f8d8 3014 	ldr.w	r3, [r8, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001f04:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001f08:	ea45 1583 	orr.w	r5, r5, r3, lsl #6
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001f0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
  TIMx->CR2 = tmpcr2;
 8001f10:	6065      	str	r5, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001f12:	61e6      	str	r6, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001f14:	6423      	str	r3, [r4, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f16:	6227      	str	r7, [r4, #32]
}
 8001f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f1c:	40010000 	.word	0x40010000
 8001f20:	08003558 	.word	0x08003558

08001f24 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001f24:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001f26:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001f28:	4290      	cmp	r0, r2
 8001f2a:	d012      	beq.n	8001f52 <TIM_Base_SetConfig+0x2e>
 8001f2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f30:	d00f      	beq.n	8001f52 <TIM_Base_SetConfig+0x2e>
 8001f32:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001f36:	4290      	cmp	r0, r2
 8001f38:	d00b      	beq.n	8001f52 <TIM_Base_SetConfig+0x2e>
 8001f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f3e:	4290      	cmp	r0, r2
 8001f40:	d007      	beq.n	8001f52 <TIM_Base_SetConfig+0x2e>
 8001f42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f46:	4290      	cmp	r0, r2
 8001f48:	d003      	beq.n	8001f52 <TIM_Base_SetConfig+0x2e>
 8001f4a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f4e:	4290      	cmp	r0, r2
 8001f50:	d11d      	bne.n	8001f8e <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001f52:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001f58:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001f5a:	4a21      	ldr	r2, [pc, #132]	; (8001fe0 <TIM_Base_SetConfig+0xbc>)
 8001f5c:	4290      	cmp	r0, r2
 8001f5e:	d104      	bne.n	8001f6a <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f60:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f66:	4313      	orrs	r3, r2
 8001f68:	e028      	b.n	8001fbc <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001f6a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f6e:	d0f7      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001f70:	4a1c      	ldr	r2, [pc, #112]	; (8001fe4 <TIM_Base_SetConfig+0xc0>)
 8001f72:	4290      	cmp	r0, r2
 8001f74:	d0f4      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001f76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f7a:	4290      	cmp	r0, r2
 8001f7c:	d0f0      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f82:	4290      	cmp	r0, r2
 8001f84:	d0ec      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001f86:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001f8a:	4290      	cmp	r0, r2
 8001f8c:	d0e8      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001f8e:	4a16      	ldr	r2, [pc, #88]	; (8001fe8 <TIM_Base_SetConfig+0xc4>)
 8001f90:	4290      	cmp	r0, r2
 8001f92:	d0e5      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001f94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f98:	4290      	cmp	r0, r2
 8001f9a:	d0e1      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001f9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fa0:	4290      	cmp	r0, r2
 8001fa2:	d0dd      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001fa4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001fa8:	4290      	cmp	r0, r2
 8001faa:	d0d9      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001fac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fb0:	4290      	cmp	r0, r2
 8001fb2:	d0d5      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
 8001fb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fb8:	4290      	cmp	r0, r2
 8001fba:	d0d1      	beq.n	8001f60 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001fbc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fbe:	688b      	ldr	r3, [r1, #8]
 8001fc0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001fc2:	680b      	ldr	r3, [r1, #0]
 8001fc4:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <TIM_Base_SetConfig+0xbc>)
 8001fc8:	4298      	cmp	r0, r3
 8001fca:	d006      	beq.n	8001fda <TIM_Base_SetConfig+0xb6>
 8001fcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd0:	4298      	cmp	r0, r3
 8001fd2:	d002      	beq.n	8001fda <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	6143      	str	r3, [r0, #20]
}
 8001fd8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001fda:	690b      	ldr	r3, [r1, #16]
 8001fdc:	6303      	str	r3, [r0, #48]	; 0x30
 8001fde:	e7f9      	b.n	8001fd4 <TIM_Base_SetConfig+0xb0>
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	40014000 	.word	0x40014000

08001fec <HAL_TIM_PWM_Init>:
{
 8001fec:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fee:	4604      	mov	r4, r0
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d06c      	beq.n	80020ce <HAL_TIM_PWM_Init+0xe2>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001ff4:	6803      	ldr	r3, [r0, #0]
 8001ff6:	4a37      	ldr	r2, [pc, #220]	; (80020d4 <HAL_TIM_PWM_Init+0xe8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d037      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d034      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 8002002:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002006:	4293      	cmp	r3, r2
 8002008:	d030      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 800200a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800200e:	4293      	cmp	r3, r2
 8002010:	d02c      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 8002012:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002016:	4293      	cmp	r3, r2
 8002018:	d028      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 800201a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800201e:	4293      	cmp	r3, r2
 8002020:	d024      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 8002022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002026:	4293      	cmp	r3, r2
 8002028:	d020      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 800202a:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 800202e:	4293      	cmp	r3, r2
 8002030:	d01c      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 8002032:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002036:	4293      	cmp	r3, r2
 8002038:	d018      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 800203a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800203e:	4293      	cmp	r3, r2
 8002040:	d014      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 8002042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002046:	4293      	cmp	r3, r2
 8002048:	d010      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 800204a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800204e:	4293      	cmp	r3, r2
 8002050:	d00c      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 8002052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002056:	4293      	cmp	r3, r2
 8002058:	d008      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 800205a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800205e:	4293      	cmp	r3, r2
 8002060:	d004      	beq.n	800206c <HAL_TIM_PWM_Init+0x80>
 8002062:	f240 31f1 	movw	r1, #1009	; 0x3f1
 8002066:	481c      	ldr	r0, [pc, #112]	; (80020d8 <HAL_TIM_PWM_Init+0xec>)
 8002068:	f7fe fb8f 	bl	800078a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800206c:	68a3      	ldr	r3, [r4, #8]
 800206e:	f033 0210 	bics.w	r2, r3, #16
 8002072:	d00a      	beq.n	800208a <HAL_TIM_PWM_Init+0x9e>
 8002074:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002078:	2a20      	cmp	r2, #32
 800207a:	d006      	beq.n	800208a <HAL_TIM_PWM_Init+0x9e>
 800207c:	2b40      	cmp	r3, #64	; 0x40
 800207e:	d004      	beq.n	800208a <HAL_TIM_PWM_Init+0x9e>
 8002080:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8002084:	4814      	ldr	r0, [pc, #80]	; (80020d8 <HAL_TIM_PWM_Init+0xec>)
 8002086:	f7fe fb80 	bl	800078a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800208a:	6923      	ldr	r3, [r4, #16]
 800208c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8002090:	d007      	beq.n	80020a2 <HAL_TIM_PWM_Init+0xb6>
 8002092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002096:	d004      	beq.n	80020a2 <HAL_TIM_PWM_Init+0xb6>
 8002098:	f240 31f3 	movw	r1, #1011	; 0x3f3
 800209c:	480e      	ldr	r0, [pc, #56]	; (80020d8 <HAL_TIM_PWM_Init+0xec>)
 800209e:	f7fe fb74 	bl	800078a <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80020a2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80020a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020aa:	b923      	cbnz	r3, 80020b6 <HAL_TIM_PWM_Init+0xca>
    htim->Lock = HAL_UNLOCKED;
 80020ac:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7fe fd25 	bl	8000b00 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 80020b6:	2302      	movs	r3, #2
 80020b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80020bc:	6820      	ldr	r0, [r4, #0]
 80020be:	1d21      	adds	r1, r4, #4
 80020c0:	f7ff ff30 	bl	8001f24 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80020c4:	2301      	movs	r3, #1
 80020c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80020ca:	2000      	movs	r0, #0
 80020cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020ce:	2001      	movs	r0, #1
}  
 80020d0:	bd10      	pop	{r4, pc}
 80020d2:	bf00      	nop
 80020d4:	40010000 	.word	0x40010000
 80020d8:	08003558 	.word	0x08003558

080020dc <HAL_TIM_Encoder_Init>:
{
 80020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020de:	460c      	mov	r4, r1
  if(htim == NULL)
 80020e0:	4605      	mov	r5, r0
 80020e2:	2800      	cmp	r0, #0
 80020e4:	f000 80ba 	beq.w	800225c <HAL_TIM_Encoder_Init+0x180>
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80020e8:	6803      	ldr	r3, [r0, #0]
 80020ea:	4a5d      	ldr	r2, [pc, #372]	; (8002260 <HAL_TIM_Encoder_Init+0x184>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d01f      	beq.n	8002130 <HAL_TIM_Encoder_Init+0x54>
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d01c      	beq.n	8002130 <HAL_TIM_Encoder_Init+0x54>
 80020f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d018      	beq.n	8002130 <HAL_TIM_Encoder_Init+0x54>
 80020fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002102:	4293      	cmp	r3, r2
 8002104:	d014      	beq.n	8002130 <HAL_TIM_Encoder_Init+0x54>
 8002106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800210a:	4293      	cmp	r3, r2
 800210c:	d010      	beq.n	8002130 <HAL_TIM_Encoder_Init+0x54>
 800210e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002112:	4293      	cmp	r3, r2
 8002114:	d00c      	beq.n	8002130 <HAL_TIM_Encoder_Init+0x54>
 8002116:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800211a:	4293      	cmp	r3, r2
 800211c:	d008      	beq.n	8002130 <HAL_TIM_Encoder_Init+0x54>
 800211e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002122:	4293      	cmp	r3, r2
 8002124:	d004      	beq.n	8002130 <HAL_TIM_Encoder_Init+0x54>
 8002126:	f640 01fa 	movw	r1, #2298	; 0x8fa
 800212a:	484e      	ldr	r0, [pc, #312]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 800212c:	f7fe fb2d 	bl	800078a <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8002130:	6823      	ldr	r3, [r4, #0]
 8002132:	3b01      	subs	r3, #1
 8002134:	2b02      	cmp	r3, #2
 8002136:	d904      	bls.n	8002142 <HAL_TIM_Encoder_Init+0x66>
 8002138:	f640 01fb 	movw	r1, #2299	; 0x8fb
 800213c:	4849      	ldr	r0, [pc, #292]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 800213e:	f7fe fb24 	bl	800078a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8002142:	68a3      	ldr	r3, [r4, #8]
 8002144:	3b01      	subs	r3, #1
 8002146:	2b02      	cmp	r3, #2
 8002148:	d904      	bls.n	8002154 <HAL_TIM_Encoder_Init+0x78>
 800214a:	f640 01fc 	movw	r1, #2300	; 0x8fc
 800214e:	4845      	ldr	r0, [pc, #276]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 8002150:	f7fe fb1b 	bl	800078a <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8002154:	69a3      	ldr	r3, [r4, #24]
 8002156:	3b01      	subs	r3, #1
 8002158:	2b02      	cmp	r3, #2
 800215a:	d904      	bls.n	8002166 <HAL_TIM_Encoder_Init+0x8a>
 800215c:	f640 01fd 	movw	r1, #2301	; 0x8fd
 8002160:	4840      	ldr	r0, [pc, #256]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 8002162:	f7fe fb12 	bl	800078a <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
 8002166:	6863      	ldr	r3, [r4, #4]
 8002168:	f033 0202 	bics.w	r2, r3, #2
 800216c:	d006      	beq.n	800217c <HAL_TIM_Encoder_Init+0xa0>
 800216e:	2b0a      	cmp	r3, #10
 8002170:	d004      	beq.n	800217c <HAL_TIM_Encoder_Init+0xa0>
 8002172:	f640 01fe 	movw	r1, #2302	; 0x8fe
 8002176:	483b      	ldr	r0, [pc, #236]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 8002178:	f7fe fb07 	bl	800078a <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
 800217c:	6963      	ldr	r3, [r4, #20]
 800217e:	f033 0202 	bics.w	r2, r3, #2
 8002182:	d006      	beq.n	8002192 <HAL_TIM_Encoder_Init+0xb6>
 8002184:	2b0a      	cmp	r3, #10
 8002186:	d004      	beq.n	8002192 <HAL_TIM_Encoder_Init+0xb6>
 8002188:	f640 01ff 	movw	r1, #2303	; 0x8ff
 800218c:	4835      	ldr	r0, [pc, #212]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 800218e:	f7fe fafc 	bl	800078a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8002192:	68e3      	ldr	r3, [r4, #12]
 8002194:	f033 030c 	bics.w	r3, r3, #12
 8002198:	d004      	beq.n	80021a4 <HAL_TIM_Encoder_Init+0xc8>
 800219a:	f44f 6110 	mov.w	r1, #2304	; 0x900
 800219e:	4831      	ldr	r0, [pc, #196]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 80021a0:	f7fe faf3 	bl	800078a <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80021a4:	69e3      	ldr	r3, [r4, #28]
 80021a6:	f033 030c 	bics.w	r3, r3, #12
 80021aa:	d004      	beq.n	80021b6 <HAL_TIM_Encoder_Init+0xda>
 80021ac:	f640 1101 	movw	r1, #2305	; 0x901
 80021b0:	482c      	ldr	r0, [pc, #176]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 80021b2:	f7fe faea 	bl	800078a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80021b6:	6923      	ldr	r3, [r4, #16]
 80021b8:	2b0f      	cmp	r3, #15
 80021ba:	d904      	bls.n	80021c6 <HAL_TIM_Encoder_Init+0xea>
 80021bc:	f640 1102 	movw	r1, #2306	; 0x902
 80021c0:	4828      	ldr	r0, [pc, #160]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 80021c2:	f7fe fae2 	bl	800078a <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80021c6:	6a23      	ldr	r3, [r4, #32]
 80021c8:	2b0f      	cmp	r3, #15
 80021ca:	d904      	bls.n	80021d6 <HAL_TIM_Encoder_Init+0xfa>
 80021cc:	f640 1103 	movw	r1, #2307	; 0x903
 80021d0:	4824      	ldr	r0, [pc, #144]	; (8002264 <HAL_TIM_Encoder_Init+0x188>)
 80021d2:	f7fe fada 	bl	800078a <assert_failed>
  if(htim->State == HAL_TIM_STATE_RESET)
 80021d6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 80021da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021de:	b923      	cbnz	r3, 80021ea <HAL_TIM_Encoder_Init+0x10e>
    htim->Lock = HAL_UNLOCKED;
 80021e0:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
    HAL_TIM_Encoder_MspInit(htim);
 80021e4:	4628      	mov	r0, r5
 80021e6:	f7fe fc0d 	bl	8000a04 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80021ea:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;   
 80021ec:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80021ee:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;   
 80021f2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80021f6:	6883      	ldr	r3, [r0, #8]
 80021f8:	f023 0307 	bic.w	r3, r3, #7
 80021fc:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80021fe:	f7ff fe91 	bl	8001f24 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002202:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 8002204:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 8002206:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8002208:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800220a:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 800220c:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 800220e:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002210:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002212:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002216:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800221a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800221e:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002220:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002224:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002226:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800222e:	68e1      	ldr	r1, [r4, #12]
 8002230:	430b      	orrs	r3, r1
 8002232:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002234:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002238:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800223c:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800223e:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002240:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002244:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8002246:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002248:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 800224c:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800224e:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 8002250:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 8002252:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 8002254:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  return HAL_OK;
 8002258:	2000      	movs	r0, #0
 800225a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800225c:	2001      	movs	r0, #1
}
 800225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002260:	40010000 	.word	0x40010000
 8002264:	08003558 	.word	0x08003558

08002268 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002268:	6a03      	ldr	r3, [r0, #32]
 800226a:	f023 0310 	bic.w	r3, r3, #16
{
 800226e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002272:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002274:	6a04      	ldr	r4, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002276:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800227a:	6987      	ldr	r7, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800227c:	680b      	ldr	r3, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800227e:	f427 47e6 	bic.w	r7, r7, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002282:	ea47 2703 	orr.w	r7, r7, r3, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002286:	688b      	ldr	r3, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002288:	f024 0420 	bic.w	r4, r4, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800228c:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <TIM_OC2_SetConfig+0x78>)
 8002292:	4298      	cmp	r0, r3
{
 8002294:	4605      	mov	r5, r0
 8002296:	460e      	mov	r6, r1
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002298:	d003      	beq.n	80022a2 <TIM_OC2_SetConfig+0x3a>
 800229a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800229e:	4298      	cmp	r0, r3
 80022a0:	d116      	bne.n	80022d0 <TIM_OC2_SetConfig+0x68>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80022a2:	68f3      	ldr	r3, [r6, #12]
 80022a4:	f033 0308 	bics.w	r3, r3, #8
 80022a8:	d004      	beq.n	80022b4 <TIM_OC2_SetConfig+0x4c>
 80022aa:	f241 2105 	movw	r1, #4613	; 0x1205
 80022ae:	480d      	ldr	r0, [pc, #52]	; (80022e4 <TIM_OC2_SetConfig+0x7c>)
 80022b0:	f7fe fa6b 	bl	800078a <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022b4:	68f3      	ldr	r3, [r6, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022b6:	69b2      	ldr	r2, [r6, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80022b8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022bc:	ea44 1403 	orr.w	r4, r4, r3, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022c0:	6973      	ldr	r3, [r6, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022c2:	f428 6840 	bic.w	r8, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022c6:	4313      	orrs	r3, r2
    tmpccer &= ~TIM_CCER_CC2NE;
 80022c8:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022cc:	ea48 0883 	orr.w	r8, r8, r3, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 80022d0:	6873      	ldr	r3, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80022d2:	f8c5 8004 	str.w	r8, [r5, #4]
  TIMx->CCMR1 = tmpccmrx;
 80022d6:	61af      	str	r7, [r5, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80022d8:	63ab      	str	r3, [r5, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80022da:	622c      	str	r4, [r5, #32]
}
 80022dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022e0:	40010000 	.word	0x40010000
 80022e4:	08003558 	.word	0x08003558

080022e8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80022e8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022ec:	2b01      	cmp	r3, #1
{
 80022ee:	b570      	push	{r4, r5, r6, lr}
 80022f0:	4604      	mov	r4, r0
 80022f2:	460d      	mov	r5, r1
 80022f4:	4616      	mov	r6, r2
  __HAL_LOCK(htim);
 80022f6:	f000 8116 	beq.w	8002526 <HAL_TIM_PWM_ConfigChannel+0x23e>
 80022fa:	2301      	movs	r3, #1
  assert_param(IS_TIM_CHANNELS(Channel)); 
 80022fc:	2a18      	cmp	r2, #24
  __HAL_LOCK(htim);
 80022fe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
 8002302:	d803      	bhi.n	800230c <HAL_TIM_PWM_ConfigChannel+0x24>
 8002304:	4b89      	ldr	r3, [pc, #548]	; (800252c <HAL_TIM_PWM_ConfigChannel+0x244>)
 8002306:	40d3      	lsrs	r3, r2
 8002308:	07db      	lsls	r3, r3, #31
 800230a:	d404      	bmi.n	8002316 <HAL_TIM_PWM_ConfigChannel+0x2e>
 800230c:	f640 4148 	movw	r1, #3144	; 0xc48
 8002310:	4887      	ldr	r0, [pc, #540]	; (8002530 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8002312:	f7fe fa3a 	bl	800078a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8002316:	682b      	ldr	r3, [r5, #0]
 8002318:	f023 0310 	bic.w	r3, r3, #16
 800231c:	2b60      	cmp	r3, #96	; 0x60
 800231e:	d004      	beq.n	800232a <HAL_TIM_PWM_ConfigChannel+0x42>
 8002320:	f640 4149 	movw	r1, #3145	; 0xc49
 8002324:	4882      	ldr	r0, [pc, #520]	; (8002530 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8002326:	f7fe fa30 	bl	800078a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800232a:	68ab      	ldr	r3, [r5, #8]
 800232c:	f033 0302 	bics.w	r3, r3, #2
 8002330:	d004      	beq.n	800233c <HAL_TIM_PWM_ConfigChannel+0x54>
 8002332:	f640 414a 	movw	r1, #3146	; 0xc4a
 8002336:	487e      	ldr	r0, [pc, #504]	; (8002530 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8002338:	f7fe fa27 	bl	800078a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800233c:	692b      	ldr	r3, [r5, #16]
 800233e:	f033 0304 	bics.w	r3, r3, #4
 8002342:	d004      	beq.n	800234e <HAL_TIM_PWM_ConfigChannel+0x66>
 8002344:	f640 414b 	movw	r1, #3147	; 0xc4b
 8002348:	4879      	ldr	r0, [pc, #484]	; (8002530 <HAL_TIM_PWM_ConfigChannel+0x248>)
 800234a:	f7fe fa1e 	bl	800078a <assert_failed>
  htim->State = HAL_TIM_STATE_BUSY;
 800234e:	2302      	movs	r3, #2
 8002350:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  switch (Channel)
 8002354:	2e0c      	cmp	r6, #12
 8002356:	d84d      	bhi.n	80023f4 <HAL_TIM_PWM_ConfigChannel+0x10c>
 8002358:	e8df f006 	tbb	[pc, r6]
 800235c:	4c4c4c07 	.word	0x4c4c4c07
 8002360:	4c4c4c53 	.word	0x4c4c4c53
 8002364:	4c4c4c89 	.word	0x4c4c4c89
 8002368:	b7          	.byte	0xb7
 8002369:	00          	.byte	0x00
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800236a:	6823      	ldr	r3, [r4, #0]
 800236c:	4a71      	ldr	r2, [pc, #452]	; (8002534 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d02f      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8002372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002376:	d02c      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8002378:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800237c:	4293      	cmp	r3, r2
 800237e:	d028      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8002380:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002384:	4293      	cmp	r3, r2
 8002386:	d024      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8002388:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800238c:	4293      	cmp	r3, r2
 800238e:	d020      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8002390:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002394:	4293      	cmp	r3, r2
 8002396:	d01c      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 8002398:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800239c:	4293      	cmp	r3, r2
 800239e:	d018      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 80023a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d014      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 80023a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d010      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 80023b0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d00c      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 80023b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023bc:	4293      	cmp	r3, r2
 80023be:	d008      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 80023c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d004      	beq.n	80023d2 <HAL_TIM_PWM_ConfigChannel+0xea>
 80023c8:	f640 4153 	movw	r1, #3155	; 0xc53
 80023cc:	4858      	ldr	r0, [pc, #352]	; (8002530 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80023ce:	f7fe f9dc 	bl	800078a <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023d2:	4629      	mov	r1, r5
 80023d4:	6820      	ldr	r0, [r4, #0]
 80023d6:	f7ff fcef 	bl	8001db8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023dc:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023de:	699a      	ldr	r2, [r3, #24]
 80023e0:	f042 0208 	orr.w	r2, r2, #8
 80023e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023e6:	699a      	ldr	r2, [r3, #24]
 80023e8:	f022 0204 	bic.w	r2, r2, #4
 80023ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023f2:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80023f4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80023f6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80023f8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80023fc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002400:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	4a4b      	ldr	r2, [pc, #300]	; (8002534 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d01f      	beq.n	800244a <HAL_TIM_PWM_ConfigChannel+0x162>
 800240a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240e:	d01c      	beq.n	800244a <HAL_TIM_PWM_ConfigChannel+0x162>
 8002410:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002414:	4293      	cmp	r3, r2
 8002416:	d018      	beq.n	800244a <HAL_TIM_PWM_ConfigChannel+0x162>
 8002418:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800241c:	4293      	cmp	r3, r2
 800241e:	d014      	beq.n	800244a <HAL_TIM_PWM_ConfigChannel+0x162>
 8002420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002424:	4293      	cmp	r3, r2
 8002426:	d010      	beq.n	800244a <HAL_TIM_PWM_ConfigChannel+0x162>
 8002428:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800242c:	4293      	cmp	r3, r2
 800242e:	d00c      	beq.n	800244a <HAL_TIM_PWM_ConfigChannel+0x162>
 8002430:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002434:	4293      	cmp	r3, r2
 8002436:	d008      	beq.n	800244a <HAL_TIM_PWM_ConfigChannel+0x162>
 8002438:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_TIM_PWM_ConfigChannel+0x162>
 8002440:	f640 4162 	movw	r1, #3170	; 0xc62
 8002444:	483a      	ldr	r0, [pc, #232]	; (8002530 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8002446:	f7fe f9a0 	bl	800078a <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800244a:	4629      	mov	r1, r5
 800244c:	6820      	ldr	r0, [r4, #0]
 800244e:	f7ff ff0b 	bl	8002268 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002452:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002454:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002456:	699a      	ldr	r2, [r3, #24]
 8002458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800245c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800245e:	699a      	ldr	r2, [r3, #24]
 8002460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002464:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002466:	699a      	ldr	r2, [r3, #24]
 8002468:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800246c:	e7c1      	b.n	80023f2 <HAL_TIM_PWM_ConfigChannel+0x10a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	4a30      	ldr	r2, [pc, #192]	; (8002534 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d017      	beq.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8002476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247a:	d014      	beq.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x1be>
 800247c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002480:	4293      	cmp	r3, r2
 8002482:	d010      	beq.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8002484:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002488:	4293      	cmp	r3, r2
 800248a:	d00c      	beq.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x1be>
 800248c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002490:	4293      	cmp	r3, r2
 8002492:	d008      	beq.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x1be>
 8002494:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002498:	4293      	cmp	r3, r2
 800249a:	d004      	beq.n	80024a6 <HAL_TIM_PWM_ConfigChannel+0x1be>
 800249c:	f640 4171 	movw	r1, #3185	; 0xc71
 80024a0:	4823      	ldr	r0, [pc, #140]	; (8002530 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80024a2:	f7fe f972 	bl	800078a <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024a6:	4629      	mov	r1, r5
 80024a8:	6820      	ldr	r0, [r4, #0]
 80024aa:	f7ff fcb1 	bl	8001e10 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024ae:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80024b0:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	f042 0208 	orr.w	r2, r2, #8
 80024b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024ba:	69da      	ldr	r2, [r3, #28]
 80024bc:	f022 0204 	bic.w	r2, r2, #4
 80024c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80024c6:	61da      	str	r2, [r3, #28]
    break;
 80024c8:	e794      	b.n	80023f4 <HAL_TIM_PWM_ConfigChannel+0x10c>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d017      	beq.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x21a>
 80024d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d6:	d014      	beq.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x21a>
 80024d8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80024dc:	4293      	cmp	r3, r2
 80024de:	d010      	beq.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x21a>
 80024e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00c      	beq.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x21a>
 80024e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d008      	beq.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x21a>
 80024f0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d004      	beq.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x21a>
 80024f8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80024fc:	480c      	ldr	r0, [pc, #48]	; (8002530 <HAL_TIM_PWM_ConfigChannel+0x248>)
 80024fe:	f7fe f944 	bl	800078a <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002502:	4629      	mov	r1, r5
 8002504:	6820      	ldr	r0, [r4, #0]
 8002506:	f7ff fcd5 	bl	8001eb4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800250a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800250c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002516:	69da      	ldr	r2, [r3, #28]
 8002518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800251e:	69da      	ldr	r2, [r3, #28]
 8002520:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002524:	e7cf      	b.n	80024c6 <HAL_TIM_PWM_ConfigChannel+0x1de>
  __HAL_LOCK(htim);
 8002526:	2002      	movs	r0, #2
}
 8002528:	bd70      	pop	{r4, r5, r6, pc}
 800252a:	bf00      	nop
 800252c:	01001111 	.word	0x01001111
 8002530:	08003558 	.word	0x08003558
 8002534:	40010000 	.word	0x40010000

08002538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002538:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800253a:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800253c:	6803      	ldr	r3, [r0, #0]
 800253e:	4293      	cmp	r3, r2
{
 8002540:	4604      	mov	r4, r0
 8002542:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8002544:	d01f      	beq.n	8002586 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254a:	d01c      	beq.n	8002586 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800254c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002550:	4293      	cmp	r3, r2
 8002552:	d018      	beq.n	8002586 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002554:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002558:	4293      	cmp	r3, r2
 800255a:	d014      	beq.n	8002586 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800255c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002560:	4293      	cmp	r3, r2
 8002562:	d010      	beq.n	8002586 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002564:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002568:	4293      	cmp	r3, r2
 800256a:	d00c      	beq.n	8002586 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800256c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002570:	4293      	cmp	r3, r2
 8002572:	d008      	beq.n	8002586 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8002574:	f502 4270 	add.w	r2, r2, #61440	; 0xf000
 8002578:	4293      	cmp	r3, r2
 800257a:	d004      	beq.n	8002586 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800257c:	f240 614a 	movw	r1, #1610	; 0x64a
 8002580:	481c      	ldr	r0, [pc, #112]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002582:	f7fe f902 	bl	800078a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002586:	682b      	ldr	r3, [r5, #0]
 8002588:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800258c:	d006      	beq.n	800259c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d004      	beq.n	800259c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002592:	f240 614b 	movw	r1, #1611	; 0x64b
 8002596:	4817      	ldr	r0, [pc, #92]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002598:	f7fe f8f7 	bl	800078a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800259c:	686b      	ldr	r3, [r5, #4]
 800259e:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80025a2:	d004      	beq.n	80025ae <HAL_TIMEx_MasterConfigSynchronization+0x76>
 80025a4:	f240 614c 	movw	r1, #1612	; 0x64c
 80025a8:	4812      	ldr	r0, [pc, #72]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80025aa:	f7fe f8ee 	bl	800078a <assert_failed>
  
  __HAL_LOCK(htim);
 80025ae:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	f04f 0002 	mov.w	r0, #2
 80025b8:	d018      	beq.n	80025ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
  
  htim->State = HAL_TIM_STATE_BUSY;

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025ba:	6823      	ldr	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025c0:	685a      	ldr	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80025c2:	6829      	ldr	r1, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025c8:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80025d0:	689a      	ldr	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80025d2:	6869      	ldr	r1, [r5, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80025d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	430a      	orrs	r2, r1
 80025de:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
 80025e0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80025e8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
} 
 80025ec:	bd38      	pop	{r3, r4, r5, pc}
 80025ee:	bf00      	nop
 80025f0:	40010000 	.word	0x40010000
 80025f4:	08003590 	.word	0x08003590

080025f8 <UART_SetConfig>:
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80025f8:	6842      	ldr	r2, [r0, #4]
 80025fa:	4b9e      	ldr	r3, [pc, #632]	; (8002874 <UART_SetConfig+0x27c>)
 80025fc:	429a      	cmp	r2, r3
{
 80025fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002602:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002604:	d904      	bls.n	8002610 <UART_SetConfig+0x18>
 8002606:	f640 1185 	movw	r1, #2437	; 0x985
 800260a:	489b      	ldr	r0, [pc, #620]	; (8002878 <UART_SetConfig+0x280>)
 800260c:	f7fe f8bd 	bl	800078a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002610:	68e3      	ldr	r3, [r4, #12]
 8002612:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002616:	d004      	beq.n	8002622 <UART_SetConfig+0x2a>
 8002618:	f640 1186 	movw	r1, #2438	; 0x986
 800261c:	4896      	ldr	r0, [pc, #600]	; (8002878 <UART_SetConfig+0x280>)
 800261e:	f7fe f8b4 	bl	800078a <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002622:	6923      	ldr	r3, [r4, #16]
 8002624:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002628:	d007      	beq.n	800263a <UART_SetConfig+0x42>
 800262a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800262e:	d004      	beq.n	800263a <UART_SetConfig+0x42>
 8002630:	f640 1187 	movw	r1, #2439	; 0x987
 8002634:	4890      	ldr	r0, [pc, #576]	; (8002878 <UART_SetConfig+0x280>)
 8002636:	f7fe f8a8 	bl	800078a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800263a:	6963      	ldr	r3, [r4, #20]
 800263c:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 8002640:	4213      	tst	r3, r2
 8002642:	d100      	bne.n	8002646 <UART_SetConfig+0x4e>
 8002644:	b923      	cbnz	r3, 8002650 <UART_SetConfig+0x58>
 8002646:	f640 1188 	movw	r1, #2440	; 0x988
 800264a:	488b      	ldr	r0, [pc, #556]	; (8002878 <UART_SetConfig+0x280>)
 800264c:	f7fe f89d 	bl	800078a <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002650:	6826      	ldr	r6, [r4, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002652:	68e2      	ldr	r2, [r4, #12]
  tmpreg = huart->Instance->CR2;
 8002654:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002656:	6920      	ldr	r0, [r4, #16]
 8002658:	69e1      	ldr	r1, [r4, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800265a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800265e:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002660:	6133      	str	r3, [r6, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002662:	68a3      	ldr	r3, [r4, #8]
  tmpreg = huart->Instance->CR1;
 8002664:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002666:	4303      	orrs	r3, r0
 8002668:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800266a:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800266e:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002670:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002674:	430b      	orrs	r3, r1
 8002676:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8002678:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800267a:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800267c:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002682:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002684:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002688:	6173      	str	r3, [r6, #20]
 800268a:	4b7c      	ldr	r3, [pc, #496]	; (800287c <UART_SetConfig+0x284>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800268c:	d17c      	bne.n	8002788 <UART_SetConfig+0x190>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800268e:	429e      	cmp	r6, r3
 8002690:	d003      	beq.n	800269a <UART_SetConfig+0xa2>
 8002692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002696:	429e      	cmp	r6, r3
 8002698:	d144      	bne.n	8002724 <UART_SetConfig+0x12c>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800269a:	f7ff fb7d 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 800269e:	2519      	movs	r5, #25
 80026a0:	fb05 f300 	mul.w	r3, r5, r0
 80026a4:	6860      	ldr	r0, [r4, #4]
 80026a6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80026aa:	0040      	lsls	r0, r0, #1
 80026ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80026b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80026b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026b8:	f7ff fb6e 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 80026bc:	6863      	ldr	r3, [r4, #4]
 80026be:	4368      	muls	r0, r5
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fbb0 f7f3 	udiv	r7, r0, r3
 80026c6:	f7ff fb67 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	4368      	muls	r0, r5
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80026d8:	fb09 7313 	mls	r3, r9, r3, r7
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	3332      	adds	r3, #50	; 0x32
 80026e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80026ea:	f7ff fb55 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 80026ee:	6862      	ldr	r2, [r4, #4]
 80026f0:	4368      	muls	r0, r5
 80026f2:	0052      	lsls	r2, r2, #1
 80026f4:	fbb0 faf2 	udiv	sl, r0, r2
 80026f8:	f7ff fb4e 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026fc:	6863      	ldr	r3, [r4, #4]
 80026fe:	4368      	muls	r0, r5
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	fbb0 f3f3 	udiv	r3, r0, r3
 8002706:	fbb3 f3f9 	udiv	r3, r3, r9
 800270a:	fb09 a313 	mls	r3, r9, r3, sl
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	3332      	adds	r3, #50	; 0x32
 8002712:	fbb3 f3f9 	udiv	r3, r3, r9
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800271c:	443b      	add	r3, r7
 800271e:	60b3      	str	r3, [r6, #8]
 8002720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002724:	f7ff fb28 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002728:	2519      	movs	r5, #25
 800272a:	fb05 f300 	mul.w	r3, r5, r0
 800272e:	6860      	ldr	r0, [r4, #4]
 8002730:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002734:	0040      	lsls	r0, r0, #1
 8002736:	fbb3 f3f0 	udiv	r3, r3, r0
 800273a:	fbb3 f3f9 	udiv	r3, r3, r9
 800273e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002742:	f7ff fb19 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002746:	6863      	ldr	r3, [r4, #4]
 8002748:	4368      	muls	r0, r5
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	fbb0 f7f3 	udiv	r7, r0, r3
 8002750:	f7ff fb12 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002754:	6863      	ldr	r3, [r4, #4]
 8002756:	4368      	muls	r0, r5
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002762:	fb09 7313 	mls	r3, r9, r3, r7
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	3332      	adds	r3, #50	; 0x32
 800276a:	fbb3 f3f9 	udiv	r3, r3, r9
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002774:	f7ff fb00 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002778:	6862      	ldr	r2, [r4, #4]
 800277a:	4368      	muls	r0, r5
 800277c:	0052      	lsls	r2, r2, #1
 800277e:	fbb0 faf2 	udiv	sl, r0, r2
 8002782:	f7ff faf9 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002786:	e7b9      	b.n	80026fc <UART_SetConfig+0x104>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002788:	429e      	cmp	r6, r3
 800278a:	d002      	beq.n	8002792 <UART_SetConfig+0x19a>
 800278c:	4b3c      	ldr	r3, [pc, #240]	; (8002880 <UART_SetConfig+0x288>)
 800278e:	429e      	cmp	r6, r3
 8002790:	d140      	bne.n	8002814 <UART_SetConfig+0x21c>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002792:	f7ff fb01 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 8002796:	6867      	ldr	r7, [r4, #4]
 8002798:	2519      	movs	r5, #25
 800279a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800279e:	fb05 f300 	mul.w	r3, r5, r0
 80027a2:	00bf      	lsls	r7, r7, #2
 80027a4:	fbb3 f3f7 	udiv	r3, r3, r7
 80027a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80027ac:	011f      	lsls	r7, r3, #4
 80027ae:	f7ff faf3 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 80027b2:	6863      	ldr	r3, [r4, #4]
 80027b4:	4368      	muls	r0, r5
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fbb0 f8f3 	udiv	r8, r0, r3
 80027bc:	f7ff faec 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 80027c0:	6863      	ldr	r3, [r4, #4]
 80027c2:	4368      	muls	r0, r5
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	fbb3 f3f9 	udiv	r3, r3, r9
 80027ce:	fb09 8313 	mls	r3, r9, r3, r8
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	3332      	adds	r3, #50	; 0x32
 80027d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80027da:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80027de:	f7ff fadb 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
 80027e2:	6862      	ldr	r2, [r4, #4]
 80027e4:	4368      	muls	r0, r5
 80027e6:	0092      	lsls	r2, r2, #2
 80027e8:	fbb0 faf2 	udiv	sl, r0, r2
 80027ec:	f7ff fad4 	bl	8001d98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80027f0:	6863      	ldr	r3, [r4, #4]
 80027f2:	4368      	muls	r0, r5
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80027fe:	fb09 a313 	mls	r3, r9, r3, sl
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	3332      	adds	r3, #50	; 0x32
 8002806:	fbb3 f3f9 	udiv	r3, r3, r9
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	ea43 0308 	orr.w	r3, r3, r8
 8002812:	e783      	b.n	800271c <UART_SetConfig+0x124>
 8002814:	f7ff fab0 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002818:	6867      	ldr	r7, [r4, #4]
 800281a:	2519      	movs	r5, #25
 800281c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002820:	fb05 f300 	mul.w	r3, r5, r0
 8002824:	00bf      	lsls	r7, r7, #2
 8002826:	fbb3 f3f7 	udiv	r3, r3, r7
 800282a:	fbb3 f3f9 	udiv	r3, r3, r9
 800282e:	011f      	lsls	r7, r3, #4
 8002830:	f7ff faa2 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002834:	6863      	ldr	r3, [r4, #4]
 8002836:	4368      	muls	r0, r5
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	fbb0 f8f3 	udiv	r8, r0, r3
 800283e:	f7ff fa9b 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002842:	6863      	ldr	r3, [r4, #4]
 8002844:	4368      	muls	r0, r5
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fbb0 f3f3 	udiv	r3, r0, r3
 800284c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002850:	fb09 8313 	mls	r3, r9, r3, r8
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	3332      	adds	r3, #50	; 0x32
 8002858:	fbb3 f3f9 	udiv	r3, r3, r9
 800285c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002860:	f7ff fa8a 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002864:	6862      	ldr	r2, [r4, #4]
 8002866:	4368      	muls	r0, r5
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	fbb0 faf2 	udiv	sl, r0, r2
 800286e:	f7ff fa83 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002872:	e7bd      	b.n	80027f0 <UART_SetConfig+0x1f8>
 8002874:	00a037a0 	.word	0x00a037a0
 8002878:	080035cb 	.word	0x080035cb
 800287c:	40011000 	.word	0x40011000
 8002880:	40011400 	.word	0x40011400

08002884 <HAL_UART_Init>:
{
 8002884:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002886:	4604      	mov	r4, r0
 8002888:	2800      	cmp	r0, #0
 800288a:	d074      	beq.n	8002976 <HAL_UART_Init+0xf2>
  if(huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800288c:	6981      	ldr	r1, [r0, #24]
 800288e:	6803      	ldr	r3, [r0, #0]
 8002890:	4a3a      	ldr	r2, [pc, #232]	; (800297c <HAL_UART_Init+0xf8>)
 8002892:	2900      	cmp	r1, #0
 8002894:	d057      	beq.n	8002946 <HAL_UART_Init+0xc2>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002896:	4293      	cmp	r3, r2
 8002898:	d010      	beq.n	80028bc <HAL_UART_Init+0x38>
 800289a:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00c      	beq.n	80028bc <HAL_UART_Init+0x38>
 80028a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d008      	beq.n	80028bc <HAL_UART_Init+0x38>
 80028aa:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d004      	beq.n	80028bc <HAL_UART_Init+0x38>
 80028b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028b6:	4832      	ldr	r0, [pc, #200]	; (8002980 <HAL_UART_Init+0xfc>)
 80028b8:	f7fd ff67 	bl	800078a <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80028bc:	69a3      	ldr	r3, [r4, #24]
 80028be:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80028c2:	d004      	beq.n	80028ce <HAL_UART_Init+0x4a>
 80028c4:	f240 1101 	movw	r1, #257	; 0x101
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80028c8:	482d      	ldr	r0, [pc, #180]	; (8002980 <HAL_UART_Init+0xfc>)
 80028ca:	f7fd ff5e 	bl	800078a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80028ce:	68a3      	ldr	r3, [r4, #8]
 80028d0:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80028d4:	d004      	beq.n	80028e0 <HAL_UART_Init+0x5c>
 80028d6:	f240 1107 	movw	r1, #263	; 0x107
 80028da:	4829      	ldr	r0, [pc, #164]	; (8002980 <HAL_UART_Init+0xfc>)
 80028dc:	f7fd ff55 	bl	800078a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80028e0:	69e3      	ldr	r3, [r4, #28]
 80028e2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80028e6:	d004      	beq.n	80028f2 <HAL_UART_Init+0x6e>
 80028e8:	f44f 7184 	mov.w	r1, #264	; 0x108
 80028ec:	4824      	ldr	r0, [pc, #144]	; (8002980 <HAL_UART_Init+0xfc>)
 80028ee:	f7fd ff4c 	bl	800078a <assert_failed>
  if(huart->gState == HAL_UART_STATE_RESET)
 80028f2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80028f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028fa:	b923      	cbnz	r3, 8002906 <HAL_UART_Init+0x82>
    huart->Lock = HAL_UNLOCKED;
 80028fc:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002900:	4620      	mov	r0, r4
 8002902:	f7fe f9a9 	bl	8000c58 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002906:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002908:	2324      	movs	r3, #36	; 0x24
 800290a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800290e:	68d3      	ldr	r3, [r2, #12]
 8002910:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002914:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff fe6e 	bl	80025f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	691a      	ldr	r2, [r3, #16]
 8002920:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002924:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800292c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002934:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002936:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002938:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800293c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002940:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002944:	bd10      	pop	{r4, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002946:	4293      	cmp	r3, r2
 8002948:	d0c1      	beq.n	80028ce <HAL_UART_Init+0x4a>
 800294a:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_UART_Init+0x100>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d0be      	beq.n	80028ce <HAL_UART_Init+0x4a>
 8002950:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002954:	4293      	cmp	r3, r2
 8002956:	d0ba      	beq.n	80028ce <HAL_UART_Init+0x4a>
 8002958:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800295c:	4293      	cmp	r3, r2
 800295e:	d0b6      	beq.n	80028ce <HAL_UART_Init+0x4a>
 8002960:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002964:	4293      	cmp	r3, r2
 8002966:	d0b2      	beq.n	80028ce <HAL_UART_Init+0x4a>
 8002968:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 800296c:	4293      	cmp	r3, r2
 800296e:	d0ae      	beq.n	80028ce <HAL_UART_Init+0x4a>
 8002970:	f240 1105 	movw	r1, #261	; 0x105
 8002974:	e7a8      	b.n	80028c8 <HAL_UART_Init+0x44>
    return HAL_ERROR;
 8002976:	2001      	movs	r0, #1
}
 8002978:	bd10      	pop	{r4, pc}
 800297a:	bf00      	nop
 800297c:	40011000 	.word	0x40011000
 8002980:	080035cb 	.word	0x080035cb
 8002984:	40004400 	.word	0x40004400

08002988 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002988:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800298a:	f000 fb07 	bl	8002f9c <vTaskStartScheduler>
  
  return osOK;
}
 800298e:	2000      	movs	r0, #0
 8002990:	bd08      	pop	{r3, pc}

08002992 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002992:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002994:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8002998:	6986      	ldr	r6, [r0, #24]
 800299a:	6902      	ldr	r2, [r0, #16]
{
 800299c:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800299e:	e890 0022 	ldmia.w	r0, {r1, r5}
  if (priority != osPriorityError) {
 80029a2:	2c84      	cmp	r4, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029a4:	9602      	str	r6, [sp, #8]
 80029a6:	6940      	ldr	r0, [r0, #20]
 80029a8:	9001      	str	r0, [sp, #4]
    fpriority += (priority - osPriorityIdle);
 80029aa:	bf14      	ite	ne
 80029ac:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80029ae:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029b0:	9400      	str	r4, [sp, #0]
 80029b2:	4628      	mov	r0, r5
 80029b4:	f000 fa32 	bl	8002e1c <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80029b8:	b004      	add	sp, #16
 80029ba:	bd70      	pop	{r4, r5, r6, pc}

080029bc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80029bc:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80029be:	2800      	cmp	r0, #0
 80029c0:	bf08      	it	eq
 80029c2:	2001      	moveq	r0, #1
 80029c4:	f000 fc32 	bl	800322c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80029c8:	2000      	movs	r0, #0
 80029ca:	bd08      	pop	{r3, pc}

080029cc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80029cc:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80029ce:	f000 fc8b 	bl	80032e8 <xTaskGetSchedulerState>
 80029d2:	2801      	cmp	r0, #1
 80029d4:	d003      	beq.n	80029de <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80029d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80029da:	f000 b90b 	b.w	8002bf4 <xPortSysTickHandler>
 80029de:	bd08      	pop	{r3, pc}

080029e0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029e0:	f100 0308 	add.w	r3, r0, #8
 80029e4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029e6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ea:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029ec:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029ee:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029f0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029f2:	6003      	str	r3, [r0, #0]
 80029f4:	4770      	bx	lr

080029f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	6103      	str	r3, [r0, #16]
 80029fa:	4770      	bx	lr

080029fc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80029fc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029fe:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a08:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002a0a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a0c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002a0e:	3301      	adds	r3, #1
 8002a10:	6003      	str	r3, [r0, #0]
 8002a12:	4770      	bx	lr

08002a14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a14:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a16:	1c53      	adds	r3, r2, #1
{
 8002a18:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002a1a:	d10a      	bne.n	8002a32 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a1c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a1e:	685a      	ldr	r2, [r3, #4]
 8002a20:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a22:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a24:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a26:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002a28:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a2a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	6003      	str	r3, [r0, #0]
 8002a30:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a32:	f100 0308 	add.w	r3, r0, #8
 8002a36:	685c      	ldr	r4, [r3, #4]
 8002a38:	6825      	ldr	r5, [r4, #0]
 8002a3a:	42aa      	cmp	r2, r5
 8002a3c:	d3ef      	bcc.n	8002a1e <vListInsert+0xa>
 8002a3e:	4623      	mov	r3, r4
 8002a40:	e7f9      	b.n	8002a36 <vListInsert+0x22>

08002a42 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a42:	6841      	ldr	r1, [r0, #4]
 8002a44:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002a46:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a48:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a4a:	6882      	ldr	r2, [r0, #8]
 8002a4c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002a4e:	6859      	ldr	r1, [r3, #4]
 8002a50:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002a52:	bf08      	it	eq
 8002a54:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002a56:	2200      	movs	r2, #0
 8002a58:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	3801      	subs	r0, #1
 8002a5e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002a60:	4770      	bx	lr
	...

08002a64 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <prvTaskExitError+0x2c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	d008      	beq.n	8002a7e <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	e7fe      	b.n	8002a7c <prvTaskExitError+0x18>
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	e7fe      	b.n	8002a8e <prvTaskExitError+0x2a>
 8002a90:	2000000c 	.word	0x2000000c

08002a94 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002a94:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <prvPortStartFirstTask+0x1c>)
 8002a96:	6800      	ldr	r0, [r0, #0]
 8002a98:	6800      	ldr	r0, [r0, #0]
 8002a9a:	f380 8808 	msr	MSP, r0
 8002a9e:	b662      	cpsie	i
 8002aa0:	b661      	cpsie	f
 8002aa2:	f3bf 8f4f 	dsb	sy
 8002aa6:	f3bf 8f6f 	isb	sy
 8002aaa:	df00      	svc	0
 8002aac:	bf00      	nop
 8002aae:	0000      	.short	0x0000
 8002ab0:	e000ed08 	.word	0xe000ed08

08002ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002ac4 <vPortEnableVFP+0x10>
 8002ab8:	6801      	ldr	r1, [r0, #0]
 8002aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002abe:	6001      	str	r1, [r0, #0]
 8002ac0:	4770      	bx	lr
 8002ac2:	0000      	.short	0x0000
 8002ac4:	e000ed88 	.word	0xe000ed88

08002ac8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002acc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002ad0:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <pxPortInitialiseStack+0x28>)
 8002ad2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ad6:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002ada:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002ade:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002ae2:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002ae6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002aea:	3844      	subs	r0, #68	; 0x44
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	08002a65 	.word	0x08002a65
	...

08002b00 <SVC_Handler>:
	__asm volatile (
 8002b00:	4b07      	ldr	r3, [pc, #28]	; (8002b20 <pxCurrentTCBConst2>)
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	6808      	ldr	r0, [r1, #0]
 8002b06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b0a:	f380 8809 	msr	PSP, r0
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f380 8811 	msr	BASEPRI, r0
 8002b1a:	4770      	bx	lr
 8002b1c:	f3af 8000 	nop.w

08002b20 <pxCurrentTCBConst2>:
 8002b20:	20000288 	.word	0x20000288

08002b24 <vPortEnterCritical>:
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8002b34:	4a0a      	ldr	r2, [pc, #40]	; (8002b60 <vPortEnterCritical+0x3c>)
 8002b36:	6813      	ldr	r3, [r2, #0]
 8002b38:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002b3a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002b3c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002b3e:	d10d      	bne.n	8002b5c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <vPortEnterCritical+0x40>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002b48:	d008      	beq.n	8002b5c <vPortEnterCritical+0x38>
 8002b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4e:	f383 8811 	msr	BASEPRI, r3
 8002b52:	f3bf 8f6f 	isb	sy
 8002b56:	f3bf 8f4f 	dsb	sy
 8002b5a:	e7fe      	b.n	8002b5a <vPortEnterCritical+0x36>
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000000c 	.word	0x2000000c
 8002b64:	e000ed04 	.word	0xe000ed04

08002b68 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002b68:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <vPortExitCritical+0x24>)
 8002b6a:	6813      	ldr	r3, [r2, #0]
 8002b6c:	b943      	cbnz	r3, 8002b80 <vPortExitCritical+0x18>
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	e7fe      	b.n	8002b7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002b80:	3b01      	subs	r3, #1
 8002b82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b84:	b90b      	cbnz	r3, 8002b8a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b86:	f383 8811 	msr	BASEPRI, r3
 8002b8a:	4770      	bx	lr
 8002b8c:	2000000c 	.word	0x2000000c

08002b90 <PendSV_Handler>:
	__asm volatile
 8002b90:	f3ef 8009 	mrs	r0, PSP
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <pxCurrentTCBConst>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	f01e 0f10 	tst.w	lr, #16
 8002ba0:	bf08      	it	eq
 8002ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002baa:	6010      	str	r0, [r2, #0]
 8002bac:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bb4:	f380 8811 	msr	BASEPRI, r0
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f000 fb58 	bl	8003274 <vTaskSwitchContext>
 8002bc4:	f04f 0000 	mov.w	r0, #0
 8002bc8:	f380 8811 	msr	BASEPRI, r0
 8002bcc:	bc08      	pop	{r3}
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	6808      	ldr	r0, [r1, #0]
 8002bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd6:	f01e 0f10 	tst.w	lr, #16
 8002bda:	bf08      	it	eq
 8002bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002be0:	f380 8809 	msr	PSP, r0
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	f3af 8000 	nop.w

08002bf0 <pxCurrentTCBConst>:
 8002bf0:	20000288 	.word	0x20000288

08002bf4 <xPortSysTickHandler>:
{
 8002bf4:	b508      	push	{r3, lr}
	__asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002c06:	f000 fa07 	bl	8003018 <xTaskIncrementTick>
 8002c0a:	b118      	cbz	r0, 8002c14 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c0c:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <xPortSysTickHandler+0x28>)
 8002c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c12:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002c14:	2300      	movs	r3, #0
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	bd08      	pop	{r3, pc}
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <vPortSetupTimerInterrupt+0x1c>)
 8002c22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c2c:	4a04      	ldr	r2, [pc, #16]	; (8002c40 <vPortSetupTimerInterrupt+0x20>)
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <vPortSetupTimerInterrupt+0x24>)
 8002c34:	2207      	movs	r2, #7
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	e000e014 	.word	0xe000e014
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c48:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <xPortStartScheduler+0xc8>)
 8002c4a:	4a32      	ldr	r2, [pc, #200]	; (8002d14 <xPortStartScheduler+0xcc>)
{
 8002c4c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c4e:	6819      	ldr	r1, [r3, #0]
 8002c50:	4291      	cmp	r1, r2
 8002c52:	d108      	bne.n	8002c66 <xPortStartScheduler+0x1e>
	__asm volatile
 8002c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c58:	f383 8811 	msr	BASEPRI, r3
 8002c5c:	f3bf 8f6f 	isb	sy
 8002c60:	f3bf 8f4f 	dsb	sy
 8002c64:	e7fe      	b.n	8002c64 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <xPortStartScheduler+0xd0>)
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d108      	bne.n	8002c80 <xPortStartScheduler+0x38>
 8002c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c72:	f383 8811 	msr	BASEPRI, r3
 8002c76:	f3bf 8f6f 	isb	sy
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	e7fe      	b.n	8002c7e <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002c80:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <xPortStartScheduler+0xd4>)
 8002c82:	781a      	ldrb	r2, [r3, #0]
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002c88:	22ff      	movs	r2, #255	; 0xff
 8002c8a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c8c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c8e:	4a24      	ldr	r2, [pc, #144]	; (8002d20 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002c96:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002c9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c9e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ca0:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <xPortStartScheduler+0xdc>)
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002cac:	0600      	lsls	r0, r0, #24
 8002cae:	f102 34ff 	add.w	r4, r2, #4294967295
 8002cb2:	d423      	bmi.n	8002cfc <xPortStartScheduler+0xb4>
 8002cb4:	b101      	cbz	r1, 8002cb8 <xPortStartScheduler+0x70>
 8002cb6:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002cbc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002cc0:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002cc2:	9b01      	ldr	r3, [sp, #4]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <xPortStartScheduler+0xd4>)
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <xPortStartScheduler+0xe0>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002cd2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002cda:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002cdc:	f7ff ffa0 	bl	8002c20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <xPortStartScheduler+0xe4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002ce6:	f7ff fee5 	bl	8002ab4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002cea:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <xPortStartScheduler+0xe8>)
 8002cec:	6813      	ldr	r3, [r2, #0]
 8002cee:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002cf2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002cf4:	f7ff fece 	bl	8002a94 <prvPortStartFirstTask>
	prvTaskExitError();
 8002cf8:	f7ff feb4 	bl	8002a64 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002cfc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002d00:	0052      	lsls	r2, r2, #1
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	f88d 2003 	strb.w	r2, [sp, #3]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	e7cc      	b.n	8002ca8 <xPortStartScheduler+0x60>
 8002d0e:	bf00      	nop
 8002d10:	e000ed00 	.word	0xe000ed00
 8002d14:	410fc271 	.word	0x410fc271
 8002d18:	410fc270 	.word	0x410fc270
 8002d1c:	e000e400 	.word	0xe000e400
 8002d20:	20000280 	.word	0x20000280
 8002d24:	20000284 	.word	0x20000284
 8002d28:	e000ed20 	.word	0xe000ed20
 8002d2c:	2000000c 	.word	0x2000000c
 8002d30:	e000ef34 	.word	0xe000ef34

08002d34 <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d34:	4906      	ldr	r1, [pc, #24]	; (8002d50 <prvIdleTask+0x1c>)
			{
				taskYIELD();
 8002d36:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <prvIdleTask+0x20>)
 8002d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d3c:	6808      	ldr	r0, [r1, #0]
 8002d3e:	2801      	cmp	r0, #1
 8002d40:	d9fd      	bls.n	8002d3e <prvIdleTask+0xa>
				taskYIELD();
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	f3bf 8f6f 	isb	sy
 8002d4c:	e7f6      	b.n	8002d3c <prvIdleTask+0x8>
 8002d4e:	bf00      	nop
 8002d50:	20000294 	.word	0x20000294
 8002d54:	e000ed04 	.word	0xe000ed04

08002d58 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d58:	4a06      	ldr	r2, [pc, #24]	; (8002d74 <prvResetNextTaskUnblockTime+0x1c>)
 8002d5a:	6813      	ldr	r3, [r2, #0]
 8002d5c:	6819      	ldr	r1, [r3, #0]
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <prvResetNextTaskUnblockTime+0x20>)
 8002d60:	b919      	cbnz	r1, 8002d6a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002d62:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002d6e:	68d2      	ldr	r2, [r2, #12]
 8002d70:	6852      	ldr	r2, [r2, #4]
 8002d72:	e7f8      	b.n	8002d66 <prvResetNextTaskUnblockTime+0xe>
 8002d74:	2000028c 	.word	0x2000028c
 8002d78:	2000035c 	.word	0x2000035c

08002d7c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	; (8002dec <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d80:	4e1b      	ldr	r6, [pc, #108]	; (8002df0 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002d82:	681d      	ldr	r5, [r3, #0]
{
 8002d84:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d86:	6830      	ldr	r0, [r6, #0]
 8002d88:	3004      	adds	r0, #4
{
 8002d8a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d8c:	f7ff fe59 	bl	8002a42 <uxListRemove>
 8002d90:	4633      	mov	r3, r6
 8002d92:	b940      	cbnz	r0, 8002da6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002d94:	6831      	ldr	r1, [r6, #0]
 8002d96:	4e17      	ldr	r6, [pc, #92]	; (8002df4 <prvAddCurrentTaskToDelayedList+0x78>)
 8002d98:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002d9a:	6832      	ldr	r2, [r6, #0]
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	4088      	lsls	r0, r1
 8002da0:	ea22 0200 	bic.w	r2, r2, r0
 8002da4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002da6:	1c62      	adds	r2, r4, #1
 8002da8:	d107      	bne.n	8002dba <prvAddCurrentTaskToDelayedList+0x3e>
 8002daa:	b137      	cbz	r7, 8002dba <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	4812      	ldr	r0, [pc, #72]	; (8002df8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002db0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002db2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002db6:	f7ff be21 	b.w	80029fc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002dba:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002dbc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002dbe:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002dc0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002dc2:	d907      	bls.n	8002dd4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	; (8002dfc <prvAddCurrentTaskToDelayedList+0x80>)
 8002dc6:	6810      	ldr	r0, [r2, #0]
 8002dc8:	6819      	ldr	r1, [r3, #0]
}
 8002dca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dce:	3104      	adds	r1, #4
 8002dd0:	f7ff be20 	b.w	8002a14 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002dd4:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <prvAddCurrentTaskToDelayedList+0x84>)
 8002dd6:	6810      	ldr	r0, [r2, #0]
 8002dd8:	6819      	ldr	r1, [r3, #0]
 8002dda:	3104      	adds	r1, #4
 8002ddc:	f7ff fe1a 	bl	8002a14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <prvAddCurrentTaskToDelayedList+0x88>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002de6:	bf38      	it	cc
 8002de8:	601c      	strcc	r4, [r3, #0]
 8002dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dec:	20000390 	.word	0x20000390
 8002df0:	20000288 	.word	0x20000288
 8002df4:	20000330 	.word	0x20000330
 8002df8:	2000037c 	.word	0x2000037c
 8002dfc:	20000290 	.word	0x20000290
 8002e00:	2000028c 	.word	0x2000028c
 8002e04:	2000035c 	.word	0x2000035c

08002e08 <prvTaskIsTaskSuspended.part.0>:
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	e7fe      	b.n	8002e18 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08002e1c <xTaskCreateStatic>:
	{
 8002e1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e20:	4680      	mov	r8, r0
 8002e22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e24:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8002e26:	4699      	mov	r9, r3
		configASSERT( puxStackBuffer != NULL );
 8002e28:	b908      	cbnz	r0, 8002e2e <xTaskCreateStatic+0x12>
 8002e2a:	f7ff ffed 	bl	8002e08 <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 8002e2e:	b944      	cbnz	r4, 8002e42 <xTaskCreateStatic+0x26>
 8002e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	e7fe      	b.n	8002e40 <xTaskCreateStatic+0x24>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e42:	f102 4680 	add.w	r6, r2, #1073741824	; 0x40000000
 8002e46:	3e01      	subs	r6, #1
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002e48:	6320      	str	r0, [r4, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e4a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
 8002e4e:	1e4b      	subs	r3, r1, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e50:	f020 0607 	bic.w	r6, r0, #7
 8002e54:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002e58:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e5a:	7858      	ldrb	r0, [r3, #1]
 8002e5c:	f802 0b01 	strb.w	r0, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002e60:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002e64:	b108      	cbz	r0, 8002e6a <xTaskCreateStatic+0x4e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e66:	428b      	cmp	r3, r1
 8002e68:	d1f7      	bne.n	8002e5a <xTaskCreateStatic+0x3e>
 8002e6a:	9d08      	ldr	r5, [sp, #32]
 8002e6c:	2d06      	cmp	r5, #6
 8002e6e:	bf28      	it	cs
 8002e70:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e72:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e76:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002e78:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002e7a:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e7c:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e7e:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002e82:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e86:	f7ff fdb6 	bl	80029f6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e8a:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e8e:	f104 0018 	add.w	r0, r4, #24
 8002e92:	f7ff fdb0 	bl	80029f6 <vListInitialiseItem>
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e96:	464a      	mov	r2, r9
 8002e98:	4641      	mov	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e9a:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 8002e9c:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ea0:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ea2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ea4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ea6:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002eaa:	f7ff fe0d 	bl	8002ac8 <pxPortInitialiseStack>
 8002eae:	6020      	str	r0, [r4, #0]
	taskENTER_CRITICAL();
 8002eb0:	f7ff fe38 	bl	8002b24 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <xTaskCreateStatic+0x14c>)
		if( pxCurrentTCB == NULL )
 8002eb6:	4d2d      	ldr	r5, [pc, #180]	; (8002f6c <xTaskCreateStatic+0x150>)
		uxCurrentNumberOfTasks++;
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002f94 <xTaskCreateStatic+0x178>
 8002ebe:	3201      	adds	r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002ec2:	682e      	ldr	r6, [r5, #0]
 8002ec4:	2e00      	cmp	r6, #0
 8002ec6:	d144      	bne.n	8002f52 <xTaskCreateStatic+0x136>
			pxCurrentTCB = pxNewTCB;
 8002ec8:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d11a      	bne.n	8002f06 <xTaskCreateStatic+0xea>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ed0:	eb08 0006 	add.w	r0, r8, r6
 8002ed4:	3614      	adds	r6, #20
 8002ed6:	f7ff fd83 	bl	80029e0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002eda:	2e8c      	cmp	r6, #140	; 0x8c
 8002edc:	d1f8      	bne.n	8002ed0 <xTaskCreateStatic+0xb4>
	vListInitialise( &xDelayedTaskList1 );
 8002ede:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8002f98 <xTaskCreateStatic+0x17c>
	vListInitialise( &xDelayedTaskList2 );
 8002ee2:	4e23      	ldr	r6, [pc, #140]	; (8002f70 <xTaskCreateStatic+0x154>)
	vListInitialise( &xDelayedTaskList1 );
 8002ee4:	4648      	mov	r0, r9
 8002ee6:	f7ff fd7b 	bl	80029e0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002eea:	4630      	mov	r0, r6
 8002eec:	f7ff fd78 	bl	80029e0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ef0:	4820      	ldr	r0, [pc, #128]	; (8002f74 <xTaskCreateStatic+0x158>)
 8002ef2:	f7ff fd75 	bl	80029e0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002ef6:	4820      	ldr	r0, [pc, #128]	; (8002f78 <xTaskCreateStatic+0x15c>)
 8002ef8:	f7ff fd72 	bl	80029e0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002efc:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <xTaskCreateStatic+0x160>)
 8002efe:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f02:	4b1f      	ldr	r3, [pc, #124]	; (8002f80 <xTaskCreateStatic+0x164>)
 8002f04:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8002f06:	4a1f      	ldr	r2, [pc, #124]	; (8002f84 <xTaskCreateStatic+0x168>)
		prvAddTaskToReadyList( pxNewTCB );
 8002f08:	491f      	ldr	r1, [pc, #124]	; (8002f88 <xTaskCreateStatic+0x16c>)
		uxTaskNumber++;
 8002f0a:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f0c:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002f0e:	3301      	adds	r3, #1
 8002f10:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f14:	2301      	movs	r3, #1
 8002f16:	4093      	lsls	r3, r2
 8002f18:	4303      	orrs	r3, r0
 8002f1a:	2014      	movs	r0, #20
 8002f1c:	600b      	str	r3, [r1, #0]
 8002f1e:	fb00 8002 	mla	r0, r0, r2, r8
 8002f22:	4639      	mov	r1, r7
 8002f24:	f7ff fd6a 	bl	80029fc <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002f28:	f7ff fe1e 	bl	8002b68 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002f2c:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <xTaskCreateStatic+0x170>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	b163      	cbz	r3, 8002f4c <xTaskCreateStatic+0x130>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f32:	682b      	ldr	r3, [r5, #0]
 8002f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d207      	bcs.n	8002f4c <xTaskCreateStatic+0x130>
			taskYIELD_IF_USING_PREEMPTION();
 8002f3c:	4b14      	ldr	r3, [pc, #80]	; (8002f90 <xTaskCreateStatic+0x174>)
 8002f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	f3bf 8f4f 	dsb	sy
 8002f48:	f3bf 8f6f 	isb	sy
	}
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if( xSchedulerRunning == pdFALSE )
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <xTaskCreateStatic+0x170>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1d5      	bne.n	8002f06 <xTaskCreateStatic+0xea>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002f60:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002f62:	bf98      	it	ls
 8002f64:	602c      	strls	r4, [r5, #0]
 8002f66:	e7ce      	b.n	8002f06 <xTaskCreateStatic+0xea>
 8002f68:	20000320 	.word	0x20000320
 8002f6c:	20000288 	.word	0x20000288
 8002f70:	20000348 	.word	0x20000348
 8002f74:	20000364 	.word	0x20000364
 8002f78:	2000037c 	.word	0x2000037c
 8002f7c:	2000028c 	.word	0x2000028c
 8002f80:	20000290 	.word	0x20000290
 8002f84:	2000032c 	.word	0x2000032c
 8002f88:	20000330 	.word	0x20000330
 8002f8c:	20000378 	.word	0x20000378
 8002f90:	e000ed04 	.word	0xe000ed04
 8002f94:	20000294 	.word	0x20000294
 8002f98:	20000334 	.word	0x20000334

08002f9c <vTaskStartScheduler>:
{
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fa0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fa2:	aa07      	add	r2, sp, #28
 8002fa4:	a906      	add	r1, sp, #24
 8002fa6:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fa8:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002faa:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fac:	f7fd fac0 	bl	8000530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fb0:	9b05      	ldr	r3, [sp, #20]
 8002fb2:	9302      	str	r3, [sp, #8]
 8002fb4:	9b06      	ldr	r3, [sp, #24]
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	9400      	str	r4, [sp, #0]
 8002fba:	4623      	mov	r3, r4
 8002fbc:	9a07      	ldr	r2, [sp, #28]
 8002fbe:	490d      	ldr	r1, [pc, #52]	; (8002ff4 <vTaskStartScheduler+0x58>)
 8002fc0:	480d      	ldr	r0, [pc, #52]	; (8002ff8 <vTaskStartScheduler+0x5c>)
 8002fc2:	f7ff ff2b 	bl	8002e1c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8002fc6:	b190      	cbz	r0, 8002fee <vTaskStartScheduler+0x52>
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002fd8:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <vTaskStartScheduler+0x60>)
 8002fda:	f04f 32ff 	mov.w	r2, #4294967295
 8002fde:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fe0:	4b07      	ldr	r3, [pc, #28]	; (8003000 <vTaskStartScheduler+0x64>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <vTaskStartScheduler+0x68>)
 8002fe8:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8002fea:	f7ff fe2d 	bl	8002c48 <xPortStartScheduler>
}
 8002fee:	b008      	add	sp, #32
 8002ff0:	bd10      	pop	{r4, pc}
 8002ff2:	bf00      	nop
 8002ff4:	08003604 	.word	0x08003604
 8002ff8:	08002d35 	.word	0x08002d35
 8002ffc:	2000035c 	.word	0x2000035c
 8003000:	20000378 	.word	0x20000378
 8003004:	20000390 	.word	0x20000390

08003008 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003008:	4a02      	ldr	r2, [pc, #8]	; (8003014 <vTaskSuspendAll+0xc>)
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000328 	.word	0x20000328

08003018 <xTaskIncrementTick>:
{
 8003018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800301c:	4b3c      	ldr	r3, [pc, #240]	; (8003110 <xTaskIncrementTick+0xf8>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d153      	bne.n	80030cc <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003024:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <xTaskIncrementTick+0xfc>)
 8003026:	681c      	ldr	r4, [r3, #0]
 8003028:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800302a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800302c:	b9bc      	cbnz	r4, 800305e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800302e:	4b3a      	ldr	r3, [pc, #232]	; (8003118 <xTaskIncrementTick+0x100>)
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	6812      	ldr	r2, [r2, #0]
 8003034:	b142      	cbz	r2, 8003048 <xTaskIncrementTick+0x30>
 8003036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303a:	f383 8811 	msr	BASEPRI, r3
 800303e:	f3bf 8f6f 	isb	sy
 8003042:	f3bf 8f4f 	dsb	sy
 8003046:	e7fe      	b.n	8003046 <xTaskIncrementTick+0x2e>
 8003048:	4a34      	ldr	r2, [pc, #208]	; (800311c <xTaskIncrementTick+0x104>)
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	6810      	ldr	r0, [r2, #0]
 800304e:	6018      	str	r0, [r3, #0]
 8003050:	6011      	str	r1, [r2, #0]
 8003052:	4a33      	ldr	r2, [pc, #204]	; (8003120 <xTaskIncrementTick+0x108>)
 8003054:	6813      	ldr	r3, [r2, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	f7ff fe7d 	bl	8002d58 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800305e:	4d31      	ldr	r5, [pc, #196]	; (8003124 <xTaskIncrementTick+0x10c>)
 8003060:	4f31      	ldr	r7, [pc, #196]	; (8003128 <xTaskIncrementTick+0x110>)
 8003062:	682b      	ldr	r3, [r5, #0]
 8003064:	429c      	cmp	r4, r3
 8003066:	f04f 0b00 	mov.w	fp, #0
 800306a:	d33e      	bcc.n	80030ea <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800306c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003118 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8003070:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003138 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003074:	f8d8 2000 	ldr.w	r2, [r8]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	bb72      	cbnz	r2, 80030da <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800307c:	f04f 32ff 	mov.w	r2, #4294967295
 8003080:	602a      	str	r2, [r5, #0]
					break;
 8003082:	e032      	b.n	80030ea <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003084:	f106 0a04 	add.w	sl, r6, #4
 8003088:	4650      	mov	r0, sl
 800308a:	f7ff fcda 	bl	8002a42 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800308e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003090:	b119      	cbz	r1, 800309a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003092:	f106 0018 	add.w	r0, r6, #24
 8003096:	f7ff fcd4 	bl	8002a42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800309a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800309c:	f8d9 3000 	ldr.w	r3, [r9]
 80030a0:	2201      	movs	r2, #1
 80030a2:	fa02 f100 	lsl.w	r1, r2, r0
 80030a6:	4319      	orrs	r1, r3
 80030a8:	4b20      	ldr	r3, [pc, #128]	; (800312c <xTaskIncrementTick+0x114>)
 80030aa:	f8c9 1000 	str.w	r1, [r9]
 80030ae:	f04f 0e14 	mov.w	lr, #20
 80030b2:	4651      	mov	r1, sl
 80030b4:	fb0e 3000 	mla	r0, lr, r0, r3
 80030b8:	f7ff fca0 	bl	80029fc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030bc:	6838      	ldr	r0, [r7, #0]
 80030be:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80030c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80030c2:	4291      	cmp	r1, r2
 80030c4:	bf28      	it	cs
 80030c6:	f04f 0b01 	movcs.w	fp, #1
 80030ca:	e7d3      	b.n	8003074 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80030cc:	4a18      	ldr	r2, [pc, #96]	; (8003130 <xTaskIncrementTick+0x118>)
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	3301      	adds	r3, #1
 80030d2:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80030d4:	f04f 0b00 	mov.w	fp, #0
 80030d8:	e011      	b.n	80030fe <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030da:	f8d8 2000 	ldr.w	r2, [r8]
 80030de:	68d2      	ldr	r2, [r2, #12]
 80030e0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030e2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80030e4:	428c      	cmp	r4, r1
 80030e6:	d2cd      	bcs.n	8003084 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80030e8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <xTaskIncrementTick+0x114>)
 80030ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030f0:	2214      	movs	r2, #20
 80030f2:	434a      	muls	r2, r1
 80030f4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80030f6:	2a02      	cmp	r2, #2
 80030f8:	bf28      	it	cs
 80030fa:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80030fe:	4a0d      	ldr	r2, [pc, #52]	; (8003134 <xTaskIncrementTick+0x11c>)
 8003100:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003102:	2a00      	cmp	r2, #0
 8003104:	bf18      	it	ne
 8003106:	f04f 0b01 	movne.w	fp, #1
}
 800310a:	4658      	mov	r0, fp
 800310c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003110:	20000328 	.word	0x20000328
 8003114:	20000390 	.word	0x20000390
 8003118:	2000028c 	.word	0x2000028c
 800311c:	20000290 	.word	0x20000290
 8003120:	20000360 	.word	0x20000360
 8003124:	2000035c 	.word	0x2000035c
 8003128:	20000288 	.word	0x20000288
 800312c:	20000294 	.word	0x20000294
 8003130:	20000324 	.word	0x20000324
 8003134:	20000394 	.word	0x20000394
 8003138:	20000330 	.word	0x20000330

0800313c <xTaskResumeAll>:
{
 800313c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003140:	4c31      	ldr	r4, [pc, #196]	; (8003208 <xTaskResumeAll+0xcc>)
 8003142:	6823      	ldr	r3, [r4, #0]
 8003144:	b943      	cbnz	r3, 8003158 <xTaskResumeAll+0x1c>
 8003146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	e7fe      	b.n	8003156 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003158:	f7ff fce4 	bl	8002b24 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	3b01      	subs	r3, #1
 8003160:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003162:	6824      	ldr	r4, [r4, #0]
 8003164:	b12c      	cbz	r4, 8003172 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003166:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003168:	f7ff fcfe 	bl	8002b68 <vPortExitCritical>
}
 800316c:	4620      	mov	r0, r4
 800316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003172:	4b26      	ldr	r3, [pc, #152]	; (800320c <xTaskResumeAll+0xd0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0f5      	beq.n	8003166 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800317a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003224 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800317e:	4f24      	ldr	r7, [pc, #144]	; (8003210 <xTaskResumeAll+0xd4>)
 8003180:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003228 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003184:	f8d9 3000 	ldr.w	r3, [r9]
 8003188:	b9e3      	cbnz	r3, 80031c4 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800318a:	b10c      	cbz	r4, 8003190 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 800318c:	f7ff fde4 	bl	8002d58 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003190:	4d20      	ldr	r5, [pc, #128]	; (8003214 <xTaskResumeAll+0xd8>)
 8003192:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003194:	b144      	cbz	r4, 80031a8 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8003196:	4e20      	ldr	r6, [pc, #128]	; (8003218 <xTaskResumeAll+0xdc>)
 8003198:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800319a:	f7ff ff3d 	bl	8003018 <xTaskIncrementTick>
 800319e:	b100      	cbz	r0, 80031a2 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80031a0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80031a2:	3c01      	subs	r4, #1
 80031a4:	d1f9      	bne.n	800319a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80031a6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <xTaskResumeAll+0xdc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0da      	beq.n	8003166 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80031b0:	4b1a      	ldr	r3, [pc, #104]	; (800321c <xTaskResumeAll+0xe0>)
 80031b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80031c0:	2401      	movs	r4, #1
 80031c2:	e7d1      	b.n	8003168 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80031c4:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80031c8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031ca:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031cc:	f104 0018 	add.w	r0, r4, #24
 80031d0:	f7ff fc37 	bl	8002a42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031d4:	4630      	mov	r0, r6
 80031d6:	f7ff fc34 	bl	8002a42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80031da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	2501      	movs	r5, #1
 80031e0:	fa05 f302 	lsl.w	r3, r5, r2
 80031e4:	2014      	movs	r0, #20
 80031e6:	430b      	orrs	r3, r1
 80031e8:	fb00 8002 	mla	r0, r0, r2, r8
 80031ec:	4631      	mov	r1, r6
 80031ee:	603b      	str	r3, [r7, #0]
 80031f0:	f7ff fc04 	bl	80029fc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031f4:	4b0a      	ldr	r3, [pc, #40]	; (8003220 <xTaskResumeAll+0xe4>)
 80031f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80031fe:	bf24      	itt	cs
 8003200:	4b05      	ldrcs	r3, [pc, #20]	; (8003218 <xTaskResumeAll+0xdc>)
 8003202:	601d      	strcs	r5, [r3, #0]
 8003204:	e7be      	b.n	8003184 <xTaskResumeAll+0x48>
 8003206:	bf00      	nop
 8003208:	20000328 	.word	0x20000328
 800320c:	20000320 	.word	0x20000320
 8003210:	20000330 	.word	0x20000330
 8003214:	20000324 	.word	0x20000324
 8003218:	20000394 	.word	0x20000394
 800321c:	e000ed04 	.word	0xe000ed04
 8003220:	20000288 	.word	0x20000288
 8003224:	20000364 	.word	0x20000364
 8003228:	20000294 	.word	0x20000294

0800322c <vTaskDelay>:
	{
 800322c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800322e:	b940      	cbnz	r0, 8003242 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003230:	4b0e      	ldr	r3, [pc, #56]	; (800326c <vTaskDelay+0x40>)
 8003232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	f3bf 8f4f 	dsb	sy
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <vTaskDelay+0x44>)
 8003244:	6819      	ldr	r1, [r3, #0]
 8003246:	b141      	cbz	r1, 800325a <vTaskDelay+0x2e>
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	e7fe      	b.n	8003258 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800325a:	f7ff fed5 	bl	8003008 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800325e:	f7ff fd8d 	bl	8002d7c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003262:	f7ff ff6b 	bl	800313c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003266:	2800      	cmp	r0, #0
 8003268:	d0e2      	beq.n	8003230 <vTaskDelay+0x4>
 800326a:	bd08      	pop	{r3, pc}
 800326c:	e000ed04 	.word	0xe000ed04
 8003270:	20000328 	.word	0x20000328

08003274 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003274:	4b17      	ldr	r3, [pc, #92]	; (80032d4 <vTaskSwitchContext+0x60>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <vTaskSwitchContext+0x64>)
{
 800327a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800327c:	b112      	cbz	r2, 8003284 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800327e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003280:	601a      	str	r2, [r3, #0]
 8003282:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003284:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003286:	4b15      	ldr	r3, [pc, #84]	; (80032dc <vTaskSwitchContext+0x68>)
 8003288:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f1c3 031f 	rsb	r3, r3, #31
 8003294:	2214      	movs	r2, #20
 8003296:	4912      	ldr	r1, [pc, #72]	; (80032e0 <vTaskSwitchContext+0x6c>)
 8003298:	435a      	muls	r2, r3
 800329a:	1888      	adds	r0, r1, r2
 800329c:	588c      	ldr	r4, [r1, r2]
 800329e:	b944      	cbnz	r4, 80032b2 <vTaskSwitchContext+0x3e>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	e7fe      	b.n	80032b0 <vTaskSwitchContext+0x3c>
 80032b2:	6844      	ldr	r4, [r0, #4]
 80032b4:	3208      	adds	r2, #8
 80032b6:	6864      	ldr	r4, [r4, #4]
 80032b8:	6044      	str	r4, [r0, #4]
 80032ba:	440a      	add	r2, r1
 80032bc:	4294      	cmp	r4, r2
 80032be:	bf04      	itt	eq
 80032c0:	6862      	ldreq	r2, [r4, #4]
 80032c2:	6042      	streq	r2, [r0, #4]
 80032c4:	2214      	movs	r2, #20
 80032c6:	fb02 1303 	mla	r3, r2, r3, r1
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <vTaskSwitchContext+0x70>)
 80032d0:	e7d6      	b.n	8003280 <vTaskSwitchContext+0xc>
 80032d2:	bf00      	nop
 80032d4:	20000328 	.word	0x20000328
 80032d8:	20000394 	.word	0x20000394
 80032dc:	20000330 	.word	0x20000330
 80032e0:	20000294 	.word	0x20000294
 80032e4:	20000288 	.word	0x20000288

080032e8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <xTaskGetSchedulerState+0x18>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	b133      	cbz	r3, 80032fc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032ee:	4b05      	ldr	r3, [pc, #20]	; (8003304 <xTaskGetSchedulerState+0x1c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80032f4:	bf0c      	ite	eq
 80032f6:	2002      	moveq	r0, #2
 80032f8:	2000      	movne	r0, #0
 80032fa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80032fc:	2001      	movs	r0, #1
	}
 80032fe:	4770      	bx	lr
 8003300:	20000378 	.word	0x20000378
 8003304:	20000328 	.word	0x20000328

08003308 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003308:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003340 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800330c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800330e:	e003      	b.n	8003318 <LoopCopyDataInit>

08003310 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003310:	4b0c      	ldr	r3, [pc, #48]	; (8003344 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003312:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003314:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003316:	3104      	adds	r1, #4

08003318 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003318:	480b      	ldr	r0, [pc, #44]	; (8003348 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800331a:	4b0c      	ldr	r3, [pc, #48]	; (800334c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800331c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800331e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003320:	d3f6      	bcc.n	8003310 <CopyDataInit>
  ldr  r2, =_sbss
 8003322:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003324:	e002      	b.n	800332c <LoopFillZerobss>

08003326 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003326:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003328:	f842 3b04 	str.w	r3, [r2], #4

0800332c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800332e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003330:	d3f9      	bcc.n	8003326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003332:	f7fd fa75 	bl	8000820 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003336:	f000 f811 	bl	800335c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800333a:	f7fd fa09 	bl	8000750 <main>
  bx  lr    
 800333e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003340:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003344:	0800361c 	.word	0x0800361c
  ldr  r0, =_sdata
 8003348:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800334c:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8003350:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8003354:	20000874 	.word	0x20000874

08003358 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003358:	e7fe      	b.n	8003358 <ADC_IRQHandler>
	...

0800335c <__libc_init_array>:
 800335c:	b570      	push	{r4, r5, r6, lr}
 800335e:	4e0d      	ldr	r6, [pc, #52]	; (8003394 <__libc_init_array+0x38>)
 8003360:	4c0d      	ldr	r4, [pc, #52]	; (8003398 <__libc_init_array+0x3c>)
 8003362:	1ba4      	subs	r4, r4, r6
 8003364:	10a4      	asrs	r4, r4, #2
 8003366:	2500      	movs	r5, #0
 8003368:	42a5      	cmp	r5, r4
 800336a:	d109      	bne.n	8003380 <__libc_init_array+0x24>
 800336c:	4e0b      	ldr	r6, [pc, #44]	; (800339c <__libc_init_array+0x40>)
 800336e:	4c0c      	ldr	r4, [pc, #48]	; (80033a0 <__libc_init_array+0x44>)
 8003370:	f000 f818 	bl	80033a4 <_init>
 8003374:	1ba4      	subs	r4, r4, r6
 8003376:	10a4      	asrs	r4, r4, #2
 8003378:	2500      	movs	r5, #0
 800337a:	42a5      	cmp	r5, r4
 800337c:	d105      	bne.n	800338a <__libc_init_array+0x2e>
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003384:	4798      	blx	r3
 8003386:	3501      	adds	r5, #1
 8003388:	e7ee      	b.n	8003368 <__libc_init_array+0xc>
 800338a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800338e:	4798      	blx	r3
 8003390:	3501      	adds	r5, #1
 8003392:	e7f2      	b.n	800337a <__libc_init_array+0x1e>
 8003394:	08003614 	.word	0x08003614
 8003398:	08003614 	.word	0x08003614
 800339c:	08003614 	.word	0x08003614
 80033a0:	08003618 	.word	0x08003618

080033a4 <_init>:
 80033a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033a6:	bf00      	nop
 80033a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033aa:	bc08      	pop	{r3}
 80033ac:	469e      	mov	lr, r3
 80033ae:	4770      	bx	lr

080033b0 <_fini>:
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033b2:	bf00      	nop
 80033b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b6:	bc08      	pop	{r3}
 80033b8:	469e      	mov	lr, r3
 80033ba:	4770      	bx	lr
